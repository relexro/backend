swagger: "2.0"
info:
  title: Relex API
  description: RESTful API for Relex Backend
  version: 1.0.0
  license:
    name: Proprietary
    url: https://relex.ro
# Host is substituted by Terraform using api_domain variable
host: ${api_domain}
basePath: /v1
schemes:
  - https
security:
  - firebase: []

securityDefinitions:
  firebase:
    type: apiKey
    name: Authorization
    in: header
    description: "Firebase Authentication JWT. Use format 'Bearer {token}'"
    # project_id is substituted by Terraform
    x-google-issuer: "https://securetoken.google.com/${project_id}"
    x-google-jwks_uri: "https://www.googleapis.com/service_accounts/v1/metadata/x509/securetoken@system.gserviceaccount.com"
    x-google-audiences: "${project_id}"


paths:
  # User profile endpoints
  /users/me:
    get:
      summary: Get user profile
      operationId: getUserProfile
      security:
        - firebase: []
      x-google-backend:
        # Address uses the function_uris map passed by Terraform
        # ASSUMPTION: Key is 'relex-backend-get-user-profile'
        address: ${function_uris["relex-backend-get-user-profile"]}
        path_translation: CONSTANT_ADDRESS
        deadline: 30.0
      responses:
        '200':
          description: User profile
          schema:
            $ref: '#/definitions/UserProfile'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Unauthorized'
        '404':
          description: Not found
          schema:
            $ref: '#/definitions/NotFound'
        '500':
          description: Internal server error
          schema:
            $ref: '#/definitions/InternalServerError'
    put:
      summary: Update user profile
      operationId: updateUserProfile
      security:
        - firebase: []
      x-google-backend:
        # ASSUMPTION: Key is 'relex-backend-update-user-profile'
        address: ${function_uris["relex-backend-update-user-profile"]}
        path_translation: CONSTANT_ADDRESS
        deadline: 30.0
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              displayName:
                type: string
              photoURL:
                type: string
              languagePreference:
                type: string
                enum: [en, ro]
      responses:
        '200':
          description: User profile updated
          schema:
            $ref: '#/definitions/UserProfile'
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/BadRequest'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Unauthorized'
        '404':
          description: Not found
          schema:
            $ref: '#/definitions/NotFound'
        '500':
          description: Internal server error
          schema:
            $ref: '#/definitions/InternalServerError'

  /users/me/organizations:
    get:
      summary: List user's organizations
      operationId: listMyOrganizations
      security:
        - firebase: []
      x-google-backend:
        # ASSUMPTION: Key is 'relex-backend-list-user-organizations'
        address: ${function_uris["relex-backend-list-user-organizations"]}
        path_translation: CONSTANT_ADDRESS
        deadline: 30.0
      responses:
        '200':
          description: List of organizations
          schema:
            type: object
            properties:
              organizations:
                type: array
                items:
                  $ref: '#/definitions/OrganizationSummary'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Unauthorized'
        '500':
          description: Internal server error
          schema:
            $ref: '#/definitions/InternalServerError'

  /users/me/cases:
    get:
      summary: List user's individual cases
      operationId: listMyCases
      security:
        - firebase: []
      x-google-backend:
        # ASSUMPTION: Key is 'relex-backend-list-cases' (handles both user/org)
        address: ${function_uris["relex-backend-list-cases"]}
        path_translation: CONSTANT_ADDRESS
        deadline: 30.0
      parameters:
        - name: status
          in: query
          required: false
          type: string
          enum: [open, archived, deleted]
        - name: limit
          in: query
          required: false
          type: integer
        - name: offset
          in: query
          required: false
          type: integer
        - name: labelIds
          in: query
          required: false
          type: array
          items:
            type: string
      responses:
        '200':
          description: List of cases
          schema:
            type: object
            properties:
              cases:
                type: array
                items:
                  $ref: '#/definitions/Case'
              total:
                type: integer
              limit:
                type: integer
              offset:
                type: integer
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Unauthorized'
        '500':
          description: Internal server error
          schema:
            $ref: '#/definitions/InternalServerError'

  # Organization endpoints
  /organizations:
    post:
      summary: Create a new organization
      operationId: createOrganization
      security:
        - firebase: []
      x-google-backend:
        # ASSUMPTION: Key is 'relex-backend-create-organization'
        address: ${function_uris["relex-backend-create-organization"]}
        path_translation: CONSTANT_ADDRESS
        deadline: 30.0
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - name
              - type
            properties:
              name:
                type: string
                description: Name of the organization
              type:
                type: string
                description: Type of organization (e.g., law_firm)
              address:
                type: string
                description: Address of the organization
              phone:
                type: string
                description: Phone number of the organization
              email:
                type: string
                description: Email of the organization
      responses:
        '201':
          description: Organization created successfully
          schema:
            $ref: '#/definitions/Organization'
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/BadRequest'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Unauthorized'
        '500':
          description: Internal server error
          schema:
            $ref: '#/definitions/InternalServerError'

  /organizations/{organizationId}:
    get:
      summary: Get organization details
      operationId: getOrganization
      security:
        - firebase: []
      x-google-backend:
        address: ${function_uris["relex-backend-get-organization"]}
        path_translation: CONSTANT_ADDRESS
        deadline: 30.0
      parameters:
        - name: organizationId
          in: path
          required: true
          type: string
      responses:
        '200':
          description: Organization details
          schema:
            $ref: '#/definitions/Organization'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Unauthorized'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/Forbidden'
        '404':
          description: Not found
          schema:
            $ref: '#/definitions/NotFound'
        '500':
          description: Internal server error
          schema:
            $ref: '#/definitions/InternalServerError'
    put:
      summary: Update organization details
      operationId: updateOrganization
      security:
        - firebase: []
      x-google-backend:
        address: ${function_uris["relex-backend-update-organization"]}
        path_translation: CONSTANT_ADDRESS
        deadline: 30.0
      parameters:
        - name: organizationId
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              name:
                type: string
                description: Name of the organization
              description:
                type: string
                description: Description of the organization
              address:
                type: object
                description: Address information for the organization
              contactInfo:
                type: object
                description: Contact information for the organization
      responses:
        '200':
          description: Organization updated successfully
          schema:
            $ref: '#/definitions/Organization'
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/BadRequest'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Unauthorized'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/Forbidden'
        '404':
          description: Not found
          schema:
            $ref: '#/definitions/NotFound'
        '500':
          description: Internal server error
          schema:
            $ref: '#/definitions/InternalServerError'
    delete:
      summary: Delete an organization
      operationId: deleteOrganization
      security:
        - firebase: []
      x-google-backend:
        # ASSUMPTION: Key is 'relex-backend-delete-organization'
        address: ${function_uris["relex-backend-delete-organization"]}
        path_translation: CONSTANT_ADDRESS
        deadline: 30.0
      parameters:
        - name: organizationId
          in: path
          required: true
          type: string
      responses:
        '200':
          description: Organization deleted successfully
          schema:
            type: object
            properties:
              message:
                type: string
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/BadRequest'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Unauthorized'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/Forbidden'
        '404':
          description: Not found
          schema:
            $ref: '#/definitions/NotFound'
        '500':
          description: Internal server error
          schema:
            $ref: '#/definitions/InternalServerError'

  # Case endpoints
  /cases:
    post:
      summary: Create an individual case
      operationId: createIndividualCase
      security:
        - firebase: []
      x-google-backend:
        # ASSUMPTION: Key is 'relex-backend-create-case' (handles both user/org)
        address: ${function_uris["relex-backend-create-case"]}
        path_translation: CONSTANT_ADDRESS
        deadline: 30.0
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - title
              - description
              - caseTier
            properties:
              title:
                type: string
                description: Title of the case
              description:
                type: string
                description: Description of the case
              paymentIntentId:
                type: string
                description: Stripe payment intent ID (optional if user has an active subscription with available quota)
              caseTier:
                type: integer
                enum: [1, 2, 3]
                description: Case tier level determining the price (1=€9.00, 2=€29.00, 3=€99.00)
              initialPartyIds:
                type: array
                items:
                  type: string
                description: Optional array of party IDs to attach initially
      responses:
        '201':
          description: Case created successfully
          schema:
            $ref: '#/definitions/Case'
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/BadRequest'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Unauthorized'
        '402':
          description: Payment required (quota exhausted or no active subscription)
          schema:
            $ref: '#/definitions/PaymentRequired'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/Forbidden'
        '500':
          description: Internal server error
          schema:
            $ref: '#/definitions/InternalServerError'

  /organizations/{organizationId}/cases:
    post:
      summary: Create an organization case
      operationId: createOrganizationCase
      security:
        - firebase: []
      x-google-backend:
        # ASSUMPTION: Key is 'relex-backend-create-case' (handles both user/org)
        address: ${function_uris["relex-backend-create-case"]}
        path_translation: CONSTANT_ADDRESS
        deadline: 30.0
      parameters:
        - name: organizationId
          in: path
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - title
              - description
              - caseTier
            properties:
              title:
                type: string
                description: Title of the case
              description:
                type: string
                description: Description of the case
              paymentIntentId:
                type: string
                description: Stripe payment intent ID (optional if organization has an active subscription with available quota)
              caseTier:
                type: integer
                enum: [1, 2, 3]
                description: Case tier level determining the price (1=€9.00, 2=€29.00, 3=€99.00)
              initialPartyIds:
                type: array
                items:
                  type: string
                description: Optional array of party IDs to attach initially
              assignedUserId:
                type: string
                description: Optional staff user ID to assign the case to
      responses:
        '201':
          description: Case created successfully
          schema:
            $ref: '#/definitions/Case'
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/BadRequest'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Unauthorized'
        '402':
          description: Payment required (quota exhausted or no active subscription)
          schema:
            $ref: '#/definitions/PaymentRequired'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/Forbidden'
        '500':
          description: Internal server error
          schema:
            $ref: '#/definitions/InternalServerError'
    get:
      summary: List organization cases
      operationId: listOrganizationCases
      security:
        - firebase: []
      x-google-backend:
        # Changed to relex-backend-list-organization-cases
        address: ${function_uris["relex-backend-list-organization-cases"]}
        path_translation: CONSTANT_ADDRESS
        deadline: 30.0
      parameters:
        - name: organizationId
          in: path
          required: true
          type: string
        - name: status
          in: query
          required: false
          type: string
          enum: [open, archived, deleted]
        - name: limit
          in: query
          required: false
          type: integer
        - name: offset
          in: query
          required: false
          type: integer
        - name: labelIds
          in: query
          required: false
          type: array
          items:
            type: string
        - name: assignedUserId
          in: query
          required: false
          type: string
          description: Filter by assigned staff member (admin only)
      responses:
        '200':
          description: List of cases
          schema:
            type: object
            properties:
              cases:
                type: array
                items:
                  $ref: '#/definitions/Case'
              total:
                type: integer
              limit:
                type: integer
              offset:
                type: integer
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/BadRequest'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Unauthorized'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/Forbidden'
        '500':
          description: Internal server error
          schema:
            $ref: '#/definitions/InternalServerError'

  # Organization members endpoints
  /organizations/{organizationId}/members:
    get:
      summary: List organization members
      operationId: listOrganizationMembers
      security:
        - firebase: []
      x-google-backend:
        # Changed to relex-backend-list-organization-members
        address: ${function_uris["relex-backend-list-organization-members"]}
        path_translation: CONSTANT_ADDRESS
        deadline: 30.0
      parameters:
        - name: organizationId
          in: path
          required: true
          type: string
      responses:
        '200':
          description: List of organization members
          schema:
            type: object
            properties:
              members:
                type: array
                items:
                  $ref: '#/definitions/OrganizationMember'
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/BadRequest'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Unauthorized'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/Forbidden'
        '404':
          description: Not found
          schema:
            $ref: '#/definitions/NotFound'
        '500':
          description: Internal server error
          schema:
            $ref: '#/definitions/InternalServerError'
    post:
      summary: Add member to organization
      operationId: addOrganizationMember
      security:
        - firebase: []
      x-google-backend:
        # Changed to relex-backend-add-organization-member
        address: ${function_uris["relex-backend-add-organization-member"]}
        path_translation: CONSTANT_ADDRESS
        deadline: 30.0
      parameters:
        - name: organizationId
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - userId
              - role
            properties:
              userId:
                type: string
                description: ID of user to add
              role:
                type: string
                description: Role for the user (staff or administrator)
                enum: [staff, administrator]
      responses:
        '200':
          description: Member added successfully
          schema:
            $ref: '#/definitions/MembershipResponse'
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/BadRequest'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Unauthorized'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/Forbidden'
        '404':
          description: Not found
          schema:
            $ref: '#/definitions/NotFound'
        '409':
          description: Conflict
          schema:
            $ref: '#/definitions/Conflict'
        '500':
          description: Internal server error
          schema:
            $ref: '#/definitions/InternalServerError'

  /organizations/{organizationId}/members/{userId}:
    put:
      summary: Update member role
      operationId: setOrganizationMemberRole
      security:
        - firebase: []
      x-google-backend:
        # Changed to relex-backend-set-organization-member-role
        address: ${function_uris["relex-backend-set-organization-member-role"]}
        path_translation: CONSTANT_ADDRESS
        deadline: 30.0
      parameters:
        - name: organizationId
          in: path
          required: true
          type: string
        - name: userId
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - newRole
            properties:
              newRole:
                type: string
                enum: [staff, administrator]
      responses:
        '200':
          description: Member role updated successfully
          schema:
            $ref: '#/definitions/MembershipResponse'
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/BadRequest'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Unauthorized'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/Forbidden'
        '404':
          description: Not found
          schema:
            $ref: '#/definitions/NotFound'
        '500':
          description: Internal server error
          schema:
            $ref: '#/definitions/InternalServerError'
    delete:
      summary: Remove member from organization
      operationId: removeOrganizationMember
      security:
        - firebase: []
      x-google-backend:
        # Changed to relex-backend-remove-organization-member
        address: ${function_uris["relex-backend-remove-organization-member"]}
        path_translation: CONSTANT_ADDRESS
        deadline: 30.0
      parameters:
        - name: organizationId
          in: path
          required: true
          type: string
        - name: userId
          in: path
          required: true
          type: string
      responses:
        '200':
          description: Member removed successfully
          schema:
            type: object
            properties:
              success:
                type: boolean
              userId:
                type: string
              organizationId:
                type: string
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/BadRequest'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Unauthorized'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/Forbidden'
        '404':
          description: Not found
          schema:
            $ref: '#/definitions/NotFound'
        '500':
          description: Internal server error
          schema:
            $ref: '#/definitions/InternalServerError'

  # File endpoints
  /cases/{caseId}/files:
    post:
      summary: Upload a file to a case
      operationId: uploadFile
      consumes:
        - application/json
      security:
        - firebase: []
      x-google-backend:
        # ASSUMPTION: Key is 'relex-backend-upload-file'
        address: ${function_uris["relex-backend-upload-file"]}
        path_translation: CONSTANT_ADDRESS
        deadline: 120.0
      parameters:
        - name: caseId
          in: path
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              fileContent:
                type: string
                format: byte
                description: Base64 encoded file content
              fileName:
                type: string
                description: Original filename
              contentType:
                type: string
                description: MIME type of the file
            required:
              - fileContent
              - fileName
      responses:
        '201':
          description: File uploaded successfully
          schema:
            $ref: '#/definitions/FileResponse'
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/BadRequest'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Unauthorized'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/Forbidden'
        '404':
          description: Not found
          schema:
            $ref: '#/definitions/NotFound'
        '500':
          description: Internal server error
          schema:
            $ref: '#/definitions/InternalServerError'

  /files/{fileId}:
    get:
      summary: Download a file
      operationId: downloadFile
      produces:
        - application/octet-stream
      security:
        - firebase: []
      x-google-backend:
        # ASSUMPTION: Key is 'relex-backend-download-file'
        address: ${function_uris["relex-backend-download-file"]}
        path_translation: CONSTANT_ADDRESS
        deadline: 60.0
      parameters:
        - name: fileId
          in: path
          required: true
          type: string
      responses:
        '200':
          description: File content
          schema:
            type: string
            format: binary
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/BadRequest'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Unauthorized'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/Forbidden'
        '404':
          description: Not found
          schema:
            $ref: '#/definitions/NotFound'
        '500':
          description: Internal server error
          schema:
            $ref: '#/definitions/InternalServerError'

  /parties/{partyId}:
    get:
      summary: Get a party by ID
      operationId: getParty
      security:
        - firebase: []
      x-google-backend:
        address: ${function_uris["relex-backend-get-party"]}
        path_translation: CONSTANT_ADDRESS
        deadline: 30.0
      parameters:
        - name: partyId
          in: path
          required: true
          type: string
      responses:
        '200':
          description: Party details
          schema:
            $ref: '#/definitions/Party'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Unauthorized'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/Forbidden'
        '404':
          description: Not found
          schema:
            $ref: '#/definitions/NotFound'
        '500':
          description: Internal server error
          schema:
            $ref: '#/definitions/InternalServerError'
    put:
      summary: Update a party
      operationId: updateParty
      security:
        - firebase: []
      x-google-backend:
        address: ${function_uris["relex-backend-update-party"]}
        path_translation: CONSTANT_ADDRESS
        deadline: 30.0
      parameters:
        - name: partyId
          in: path
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/PartyUpdateInput'
      responses:
        '200':
          description: Party updated successfully
          schema:
            $ref: '#/definitions/Party'
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/BadRequest'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Unauthorized'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/Forbidden'
        '404':
          description: Not found
          schema:
            $ref: '#/definitions/NotFound'
        '500':
          description: Internal server error
          schema:
            $ref: '#/definitions/InternalServerError'
    delete:
      summary: Delete a party
      operationId: deleteParty
      security:
        - firebase: []
      x-google-backend:
        address: ${function_uris["relex-backend-delete-party"]}
        path_translation: CONSTANT_ADDRESS
        deadline: 30.0
      parameters:
        - name: partyId
          in: path
          required: true
          type: string
      responses:
        '204':
          description: Party deleted successfully
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Unauthorized'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/Forbidden'
        '404':
          description: Not found
          schema:
            $ref: '#/definitions/NotFound'
        '409':
          description: Conflict - Party cannot be deleted (e.g., attached to cases)
          schema:
            $ref: '#/definitions/Conflict'
        '500':
          description: Internal server error
          schema:
            $ref: '#/definitions/InternalServerError'

  /cases/{caseId}/parties:
    post:
      summary: Attach a party to a case
      operationId: attachPartyToCase
      security:
        - firebase: []
      x-google-backend:
        address: ${function_uris["relex-backend-attach-party"]}
        path_translation: CONSTANT_ADDRESS
        deadline: 30.0
      parameters:
        - name: caseId
          in: path
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - partyId
            properties:
              partyId:
                type: string
                description: ID of the party to attach to the case
      responses:
        '200':
          description: Party attached successfully
          schema:
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
              caseId:
                type: string
              partyId:
                type: string
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/BadRequest'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Unauthorized'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/Forbidden'
        '404':
          description: Not found
          schema:
            $ref: '#/definitions/NotFound'
        '409':
          description: Conflict (e.g., party already attached)
          schema:
            $ref: '#/definitions/Conflict'
        '500':
          description: Internal server error
          schema:
            $ref: '#/definitions/InternalServerError'

  /cases/{caseId}/parties/{partyId}:
    delete:
      summary: Detach a party from a case
      operationId: detachPartyFromCase
      security:
        - firebase: []
      x-google-backend:
        # ASSUMPTION: Key is 'relex-backend-detach-party'
        address: ${function_uris["relex-backend-detach-party"]}
        path_translation: CONSTANT_ADDRESS
        deadline: 30.0
      parameters:
        - name: caseId
          in: path
          required: true
          type: string
        - name: partyId
          in: path
          required: true
          type: string
      responses:
        '200':
          description: Party detached successfully
          schema:
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
              caseId:
                type: string
              partyId:
                type: string
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Unauthorized'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/Forbidden'
        '404':
          description: Not found
          schema:
            $ref: '#/definitions/NotFound'
        '500':
          description: Internal server error
          schema:
            $ref: '#/definitions/InternalServerError'

  # --- Start of /api prefixed paths ---
  # These paths are kept, but corrected to use function_uris map
  # Ensure the keys match what module.cloud_functions.function_uris provides
  # It's likely these point to the *same* functions as the non-/api paths above

  /api/stripe/webhook:
    post:
      summary: Handle Stripe webhook events (Alternative Path)
      operationId: handleStripeWebhookAlt
      tags:
        - Subscriptions
      consumes:
        - application/json
      produces:
        - application/json
      security: []  # No Firebase auth - secured by Stripe signature
      x-google-backend:
        address: ${function_uris["relex-backend-handle-stripe-webhook"]}
        path_translation: CONSTANT_ADDRESS
        deadline: 30.0
      responses:
        '200':
          description: Webhook processed successfully
          schema:
            type: object
            properties:
              received: 
                type: boolean
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/BadRequest'
        '500':
          description: Internal server error
          schema:
            $ref: '#/definitions/InternalServerError'

  /api/parties/{partyId}:
    get:
      summary: Get a party by ID (Alternative Path)
      operationId: getPartyAlt
      tags:
        - Parties
      security:
        - firebase: []
      produces:
        - application/json
      x-google-backend:
        # ASSUMPTION: Key is 'relex-backend-get-party'
        address: ${function_uris["relex-backend-get-party"]}
        path_translation: CONSTANT_ADDRESS
        deadline: 30.0
      parameters:
        - name: partyId
          in: path
          required: true
          type: string
          description: Unique identifier for the party
      responses:
        '200':
          description: Party details
          schema:
            $ref: '#/definitions/Party'
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/BadRequest'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Unauthorized'
        '404':
          description: Not found
          schema:
            $ref: '#/definitions/NotFound'
        '500':
          description: Internal server error
          schema:
            $ref: '#/definitions/InternalServerError'
    put:
      summary: Update a party (Alternative Path)
      operationId: updatePartyAlt
      tags:
        - Parties
      security:
        - firebase: []
      consumes:
        - application/json
      produces:
        - application/json
      x-google-backend:
        # ASSUMPTION: Key is 'relex-backend-update-party'
        address: ${function_uris["relex-backend-update-party"]}
        path_translation: CONSTANT_ADDRESS
        deadline: 30.0
      parameters:
        - name: partyId
          in: path
          required: true
          type: string
          description: Unique identifier for the party
        - in: body
          name: party
          required: true
          schema:
            $ref: '#/definitions/PartyUpdateInput'
      responses:
        '200':
          description: Party updated successfully
          schema:
            $ref: '#/definitions/Party'
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/BadRequest'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Unauthorized'
        '404':
          description: Not found
          schema:
            $ref: '#/definitions/NotFound'
        '500':
          description: Internal server error
          schema:
            $ref: '#/definitions/InternalServerError'
    delete:
      summary: Delete a party (Alternative Path)
      operationId: deletePartyAlt
      tags:
        - Parties
      security:
        - firebase: []
      produces:
        - application/json
      x-google-backend:
        # ASSUMPTION: Key is 'relex-backend-delete-party'
        address: ${function_uris["relex-backend-delete-party"]}
        path_translation: CONSTANT_ADDRESS
        deadline: 30.0
      parameters:
        - name: partyId
          in: path
          required: true
          type: string
          description: Unique identifier for the party
      responses:
        '204':
          description: Party deleted successfully
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/BadRequest'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Unauthorized'
        '404':
          description: Not found
          schema:
            $ref: '#/definitions/NotFound'
        '409':
          description: Conflict - Party cannot be deleted (e.g., attached to cases)
          schema:
            $ref: '#/definitions/Conflict'
        '500':
          description: Internal server error
          schema:
            $ref: '#/definitions/InternalServerError'

  /api/cases/{caseId}/parties:
    post:
      summary: Attach a party to a case (Alternative Path)
      operationId: attachPartyToCaseAlt
      tags:
        - Parties
        - Cases
      security:
        - firebase: []
      consumes:
        - application/json
      produces:
        - application/json
      x-google-backend:
        address: ${function_uris["relex-backend-attach-party"]}
        path_translation: CONSTANT_ADDRESS
        deadline: 30.0
      parameters:
        - name: caseId
          in: path
          required: true
          type: string
          description: Unique identifier for the case
        - in: body
          name: partyAssociation
          required: true
          schema:
            type: object
            required:
              - partyId
            properties:
              partyId:
                type: string
                description: Unique identifier for the party to attach
      responses:
        '200':
          description: Party successfully attached to case
          schema:
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
              caseId:
                type: string
              partyId:
                type: string
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/BadRequest'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Unauthorized'
        '404':
          description: Not found
          schema:
            $ref: '#/definitions/NotFound'
        '409':
          description: Conflict (e.g., party already attached)
          schema:
            $ref: '#/definitions/Conflict'
        '500':
          description: Internal server error
          schema:
            $ref: '#/definitions/InternalServerError'

  /api/cases/{caseId}/parties/{partyId}:
    delete:
      summary: Detach a party from a case (Alternative Path)
      operationId: detachPartyFromCaseAlt
      tags:
        - Parties
        - Cases
      security:
        - firebase: []
      produces:
        - application/json
      x-google-backend:
        address: ${function_uris["relex-backend-detach-party"]}
        path_translation: CONSTANT_ADDRESS
        deadline: 30.0
      parameters:
        - name: caseId
          in: path
          required: true
          type: string
          description: Unique identifier for the case
        - name: partyId
          in: path
          required: true
          type: string
          description: Unique identifier for the party
      responses:
        '200':
          description: Party successfully detached from case
          schema:
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
              caseId:
                type: string
              partyId:
                type: string
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Unauthorized'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/Forbidden'
        '404':
          description: Not found
          schema:
            $ref: '#/definitions/NotFound'
        '500':
          description: Internal server error
          schema:
            $ref: '#/definitions/InternalServerError'

  # Original Case Actions (GET/DELETE/ARCHIVE/ASSIGN on /cases/{caseId})
  /cases/{caseId}:
    get:
      summary: Get case details
      operationId: getCase
      security:
        - firebase: []
      x-google-backend:
        # ASSUMPTION: Key is 'relex-backend-get-case'
        address: ${function_uris["relex-backend-get-case"]}
        path_translation: CONSTANT_ADDRESS
        deadline: 30.0
      parameters:
        - name: caseId
          in: path
          required: true
          type: string
      responses:
        '200':
          description: Case details
          schema:
            $ref: '#/definitions/Case'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Unauthorized'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/Forbidden'
        '404':
          description: Not found
          schema:
            $ref: '#/definitions/NotFound'
        '500':
          description: Internal server error
          schema:
            $ref: '#/definitions/InternalServerError'
    delete:
      summary: Delete case (mark as deleted)
      operationId: deleteCase
      security:
        - firebase: []
      x-google-backend:
        # ASSUMPTION: Key is 'relex-backend-delete-case'
        address: ${function_uris["relex-backend-delete-case"]}
        path_translation: CONSTANT_ADDRESS
        deadline: 30.0
      parameters:
        - name: caseId
          in: path
          required: true
          type: string
      responses:
        '200':
          description: Case deleted successfully
          schema:
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Unauthorized'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/Forbidden'
        '404':
          description: Not found
          schema:
            $ref: '#/definitions/NotFound'
        '500':
          description: Internal server error
          schema:
            $ref: '#/definitions/InternalServerError'

  /cases/{caseId}/archive:
    post:
      summary: Archive case
      operationId: archiveCase
      security:
        - firebase: []
      x-google-backend:
        # ASSUMPTION: Key is 'relex-backend-archive-case'
        address: ${function_uris["relex-backend-archive-case"]}
        path_translation: CONSTANT_ADDRESS
        deadline: 30.0
      parameters:
        - name: caseId
          in: path
          required: true
          type: string
      responses:
        '200':
          description: Case archived successfully
          schema:
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
              caseId:
                type: string
              status:
                type: string
                enum: [archived]
              archivedAt:
                type: string
                format: date-time
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Unauthorized'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/Forbidden'
        '404':
          description: Not found
          schema:
            $ref: '#/definitions/NotFound'
        '409':
          description: Conflict (e.g., case already archived or deleted)
          schema:
            $ref: '#/definitions/Conflict'
        '500':
          description: Internal server error
          schema:
            $ref: '#/definitions/InternalServerError'

  /cases/{caseId}/assign:
    put:
      summary: Assign case to staff member (not implemented yet)
      operationId: assignCase
      security:
        - firebase: []
      x-google-backend:
        # Use the actual function reference now that it exists in variables.tf
        address: ${function_uris["relex-backend-assign-case"]}
        path_translation: CONSTANT_ADDRESS
        deadline: 30.0
      parameters:
        - name: caseId
          in: path
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              assignedUserId:
                type: string
                x-nullable: true
                description: Staff user ID to assign case to, null to unassign
      responses:
        '200':
          description: Case assigned successfully (Not Implemented)
          schema:
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
              caseId:
                type: string
              assignedUserId:
                type: string
                x-nullable: true
              assignedUserName:
                type: string
                x-nullable: true
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Unauthorized'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/Forbidden'
        '404':
          description: Not found
          schema:
            $ref: '#/definitions/NotFound'
        '501':
          description: Not Implemented
          schema:
            type: object
            properties:
              error:
                type: string
                enum: [not_implemented]
              message:
                type: string

  /products:
    get:
      summary: Get active products and prices from Stripe
      operationId: getProducts
      security: [] # No authentication required
      x-google-backend:
        address: ${function_uris["relex-backend-get-products"]}
        path_translation: CONSTANT_ADDRESS
        deadline: 30.0
      responses:
        '200':
          description: List of active products and prices
          schema:
            $ref: '#/definitions/ProductList'
        '500':
          description: Internal server error or Stripe API error
          schema:
            $ref: '#/definitions/InternalServerError'

definitions:
  BadRequest:
    description: Bad request error response
    type: object
    properties:
      error:
        type: string
        enum: [bad_request]
      message:
        type: string
    required:
      - error
      - message

  Unauthorized:
    description: Unauthorized error response
    type: object
    properties:
      error:
        type: string
        enum: [unauthorized]
      message:
        type: string
    required:
      - error
      - message

  Forbidden:
    description: Forbidden error response
    type: object
    properties:
      error:
        type: string
        enum: [forbidden]
      message:
        type: string
    required:
      - error
      - message

  NotFound:
    description: Not found error response
    type: object
    properties:
      error:
        type: string
        enum: [not_found]
      message:
        type: string
    required:
      - error
      - message

  Conflict:
    description: Conflict error response
    type: object
    properties:
      error:
        type: string
        enum: [conflict]
      message:
        type: string
    required:
      - error
      - message

  InternalServerError:
    description: Internal server error response
    type: object
    properties:
      error:
        type: string
        enum: [internal_server_error]
      message:
        type: string
    required:
      - error
      - message

  PaymentRequired:
    description: Payment required error response
    type: object
    properties:
      error:
        type: string
        enum: [payment_required]
      message:
        type: string
    required:
      - error
      - message

  UserProfile:
    type: object
    description: User profile information
    properties:
      id:
        type: string
        description: Unique identifier for the user
      email:
        type: string
        format: email
        description: User's email address
      displayName:
        type: string
        description: User's display name
      photoURL:
        type: string
        format: uri
        description: URL to user's profile photo
      createdAt:
        type: string
        format: date-time
        description: Timestamp when the user was created
      updatedAt:
        type: string
        format: date-time
        description: Timestamp when the user was last updated
    required:
      - id
      - email

  OrganizationSummary:
    type: object
    description: Summary information about an organization
    properties:
      id:
        type: string
        description: Unique identifier for the organization
      name:
        type: string
        description: Name of the organization
      role:
        type: string
        enum: [admin, member]
        description: User's role in the organization
    required:
      - id
      - name
      - role

  Organization:
    type: object
    description: Detailed information about an organization
    properties:
      id:
        type: string
        description: Unique identifier for the organization
      name:
        type: string
        description: Name of the organization
      description:
        type: string
        description: Description of the organization
      createdAt:
        type: string
        format: date-time
        description: Timestamp when the organization was created
      updatedAt:
        type: string
        format: date-time
        description: Timestamp when the organization was last updated
      createdBy:
        type: string
        description: User ID of the creator
    required:
      - id
      - name

  OrganizationMember:
    type: object
    description: Information about an organization member
    properties:
      userId:
        type: string
        description: Unique identifier for the user
      email:
        type: string
        format: email
        description: User's email address
      displayName:
        type: string
        description: User's display name
      photoURL:
        type: string
        format: uri
        description: URL to user's profile photo
      role:
        type: string
        enum: [admin, member]
        description: User's role in the organization
      joinedAt:
        type: string
        format: date-time
        description: Timestamp when the user joined the organization
    required:
      - userId
      - email
      - role

  MembershipResponse:
    type: object
    description: Response after membership operations
    properties:
      success:
        type: boolean
        description: Whether the operation was successful
      message:
        type: string
        description: Success or error message
      userId:
        type: string
        description: User ID involved in the membership operation
      organizationId:
        type: string
        description: Organization ID involved in the membership operation
      role:
        type: string
        enum: [admin, member]
        description: User's role in the organization
    required:
      - success
      - organizationId
      - userId
      - role

  Case:
    type: object
    description: Case information
    properties:
      id:
        type: string
        description: Unique identifier for the case
      title:
        type: string
        description: Title of the case
      description:
        type: string
        description: Description of the case
      status:
        type: string
        enum: [active, archived, deleted]
        description: Status of the case
      organizationId:
        type: string
        description: Organization ID the case belongs to
      createdAt:
        type: string
        format: date-time
        description: Timestamp when the case was created
      updatedAt:
        type: string
        format: date-time
        description: Timestamp when the case was last updated
      createdBy:
        type: string
        description: User ID of the creator
      assignedUserId:
        type: string
        description: User ID of the assigned user
        x-nullable: true
      assignedUserName:
        type: string
        description: Name of the assigned user
        x-nullable: true
      parties:
        type: array
        items:
          type: object
          properties:
            id:
              type: string
              description: Party ID
            name:
              type: string
              description: Party name
            type:
              type: string
              description: Party type
        description: Parties associated with the case
    required:
      - id
      - title
      - status
      - organizationId

  Party:
    type: object
    description: Party information
    properties:
      id:
        type: string
        description: Unique identifier for the party
      name:
        type: string
        description: Name of the party
      type:
        type: string
        enum: [individual, company, organization]
        description: Type of party
      contact:
        type: object
        properties:
          email:
            type: string
            format: email
            description: Contact email
          phone:
            type: string
            description: Contact phone number
          address:
            type: string
            description: Contact address
      createdAt:
        type: string
        format: date-time
        description: Timestamp when the party was created
      updatedAt:
        type: string
        format: date-time
        description: Timestamp when the party was last updated
      organizationId:
        type: string
        description: Organization ID the party belongs to
      createdBy:
        type: string
        description: User ID of the creator
    required:
      - id
      - name
      - type
      - organizationId

  PartyInput:
    type: object
    description: Input for creating a party
    properties:
      name:
        type: string
        description: Name of the party
      type:
        type: string
        enum: [individual, company, organization]
        description: Type of party
      contact:
        type: object
        properties:
          email:
            type: string
            format: email
            description: Contact email
          phone:
            type: string
            description: Contact phone number
          address:
            type: string
            description: Contact address
      organizationId:
        type: string
        description: Organization ID the party belongs to
    required:
      - name
      - type
      - organizationId

  PartyUpdateInput:
    type: object
    description: Input for updating a party
    properties:
      name:
        type: string
        description: Name of the party
      type:
        type: string
        enum: [individual, company, organization]
        description: Type of party
      contact:
        type: object
        properties:
          email:
            type: string
            format: email
            description: Contact email
          phone:
            type: string
            description: Contact phone number
          address:
            type: string
            description: Contact address

  FileResponse:
    type: object
    description: Response after file operations
    properties:
      id:
        type: string
        description: Unique identifier for the file
      name:
        type: string
        description: Name of the file
      contentType:
        type: string
        description: MIME type of the file
      size:
        type: integer
        description: Size of the file in bytes
      url:
        type: string
        format: uri
        description: URL to access the file
      caseId:
        type: string
        description: Case ID the file belongs to
      uploadedBy:
        type: string
        description: User ID of the uploader
      uploadedAt:
        type: string
        format: date-time
        description: Timestamp when the file was uploaded
    required:
      - id
      - name
      - contentType
      - size
      - caseId

  ProductList:
    type: object
    description: List of active products categorized by type
    properties:
      subscriptions:
        type: array
        items:
          $ref: '#/definitions/SubscriptionProduct'
      cases:
        type: array
        items:
          $ref: '#/definitions/CaseProduct'
    required:
      - subscriptions
      - cases

  SubscriptionProduct:
    type: object
    description: Subscription product with pricing details
    properties:
      id:
        type: string
        description: Stripe product ID
      name:
        type: string
        description: Product name
      description:
        type: string
        description: Product description
      plan_type:
        type: string
        description: Plan type (e.g., individual, org_basic, org_pro)
      price:
        $ref: '#/definitions/ProductPrice'
    required:
      - id
      - name
      - price

  CaseProduct:
    type: object
    description: Case product with pricing details
    properties:
      id:
        type: string
        description: Stripe product ID
      name:
        type: string
        description: Product name
      description:
        type: string
        description: Product description
      tier:
        type: integer
        description: Case tier (1, 2, or 3)
        enum: [1, 2, 3]
      price:
        $ref: '#/definitions/ProductPrice'
    required:
      - id
      - name
      - price

  ProductPrice:
    type: object
    description: Price information for a product
    properties:
      id:
        type: string
        description: Stripe price ID
      amount:
        type: integer
        description: Price amount in smallest currency unit (e.g., cents)
      currency:
        type: string
        description: Three-letter ISO currency code (e.g., eur)
      type:
        type: string
        enum: [recurring, one_time]
        description: Price type
      recurring:
        type: object
        description: Recurring price details (only for subscription products)
        properties:
          interval:
            type: string
            enum: [month, year]
            description: Billing interval
          interval_count:
            type: integer
            description: Number of intervals between billings
        required:
          - interval
          - interval_count
    required:
      - id
      - amount
      - currency
      - type