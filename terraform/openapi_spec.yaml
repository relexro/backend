openapi: '3.0.0'
info:
  title: Relex API
  description: RESTful API for Relex Backend
  version: 1.0.0
  license:
    name: Proprietary
    url: 'https://relex.ro'
servers:
  - url: https://${api_domain}/v1
    description: Production API server
security:
  - firebase: []
paths:
  /cases:
    post:
      summary: Create a new individual case
      description: Creates a new individual case for the authenticated user
      operationId: relex_backend_create_case
      security:
        - firebase: []
      x-google-backend:
        address: '${function_uris["relex-backend-create-case"]}'
        path_translation: CONSTANT_ADDRESS
        deadline: 30.0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCaseRequest'
      responses:
        '201':
          description: Case created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateCaseResponse'
        '400':
          description: Invalid request format or data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: Authentication token is missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: User does not have permission for this action
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        '404':
          description: User or organization not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '500':
          description: Server encountered an unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
                
  /cases/{caseId}:
    get:
      summary: Get case details
      description: Retrieves detailed information about a specific case
      operationId: relex_backend_get_case
      security:
        - firebase: []
      x-google-backend:
        address: '${function_uris["relex-backend-get-case"]}'
        path_translation: CONSTANT_ADDRESS
        deadline: 30.0
      parameters:
        - name: caseId
          in: path
          required: true
          description: The unique identifier of the case
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved the case details
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Case'
                  - type: object
                    # Additional properties that might be in the document
        '400':
          description: Case ID is missing from the URL path
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: Authentication token is missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: User does not have permission to access this case
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        '404':
          description: Case not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '500':
          description: Server encountered an unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
    delete:
      summary: Delete a case
      description: Marks a case as deleted (soft delete). The case will not appear in regular listings but remains in the database.
      operationId: relex_backend_delete_case
      security:
        - firebase: []
      x-google-backend:
        address: '${function_uris["relex-backend-delete-case"]}'
        path_translation: CONSTANT_ADDRESS
        deadline: 30.0
      parameters:
        - name: caseId
          in: path
          required: true
          description: The unique identifier of the case
          schema:
            type: string
      responses:
        '200':
          description: Case successfully marked as deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Case marked as deleted successfully
        '400':
          description: Case ID is missing from the URL path
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: Authentication token is missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: User does not have permission to delete this case
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        '404':
          description: Case not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '500':
          description: Server encountered an unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
                
  /cases/{caseId}/archive:
    post:
      summary: Archive a case
      description: Archives a case, making it inaccessible to normal case listings but still retrievable.
      operationId: relex_backend_archive_case
      security:
        - firebase: []
      x-google-backend:
        address: '${function_uris["relex-backend-archive-case"]}'
        path_translation: CONSTANT_ADDRESS
        deadline: 30.0
      parameters:
        - name: caseId
          in: path
          required: true
          description: The unique identifier of the case
          schema:
            type: string
      responses:
        '200':
          description: Case successfully archived
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Case archived successfully
        '400':
          description: Case ID is missing from the URL path
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: Authentication token is missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: User does not have permission to archive this case
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        '404':
          description: Case not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '500':
          description: Server encountered an unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
                
  /users/me/cases:
    get:
      summary: List user's cases
      description: Returns a list of cases that belong to the current authenticated user
      operationId: relex_backend_list_cases
      security:
        - firebase: []
      x-google-backend:
        address: '${function_uris["relex-backend-list-cases"]}'
        path_translation: CONSTANT_ADDRESS
        deadline: 30.0
      parameters:
        - name: status
          in: query
          required: false
          description: Filter by case status
          schema:
            type: string
            enum: [open, closed, archived]
        - name: limit
          in: query
          required: false
          description: Maximum number of cases to return. Default: 50, Max: 100
          schema:
            type: integer
            default: 50
            maximum: 100
        - name: offset
          in: query
          required: false
          description: Number of cases to skip. Default: 0
          schema:
            type: integer
            default: 0
      responses:
        '200':
          description: Successfully retrieved the list of user cases
          content:
            application/json:
              schema:
                type: object
                properties:
                  cases:
                    type: array
                    items:
                      $ref: '#/components/schemas/Case'
                  pagination:
                    type: object
                    properties:
                      total:
                        type: integer
                        description: Total number of cases matching the query
                      limit:
                        type: integer
                        description: Limit used for the query
                      offset:
                        type: integer
                        description: Offset used for the query
                      hasMore:
                        type: boolean
                        description: Indicates if there are more cases available
                  organizationId:
                    type: string
                    description: Organization ID if requested (null for individual cases)
                    nullable: true
        '401':
          description: Authentication token is missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '500':
          description: Server encountered an unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
                
  /organizations/{organizationId}/cases:
    get:
      summary: List organization cases
      description: Returns a list of cases that belong to the specified organization
      operationId: relex_backend_list_organization_cases
      security:
        - firebase: []
      x-google-backend:
        address: '${function_uris["relex-backend-list-organization-cases"]}'
        path_translation: CONSTANT_ADDRESS
        deadline: 30.0
      parameters:
        - name: organizationId
          in: path
          required: true
          description: The unique identifier of the organization
          schema:
            type: string
        - name: status
          in: query
          required: false
          description: Filter by case status
          schema:
            type: string
            enum: [open, archived, deleted]
            default: open
        - name: limit
          in: query
          required: false
          description: Maximum number of cases to return. Default: 20
          schema:
            type: integer
            default: 20
        - name: offset
          in: query
          required: false
          description: Number of cases to skip. Default: 0
          schema:
            type: integer
            default: 0
        - name: assignedUserId
          in: query
          required: false
          description: Filter by assigned staff member (admin only)
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved the list of cases
          content:
            application/json:
              schema:
                type: object
                properties:
                  cases:
                    type: array
                    items:
                      $ref: '#/components/schemas/Case'
                  total:
                    type: integer
                    description: Total number of cases matching the criteria
                  limit:
                    type: integer
                    description: Maximum number of cases returned
                  offset:
                    type: integer
                    description: Number of cases skipped
        '400':
          description: Invalid request format or parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: Authentication token is missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: User does not have permission to view cases for this organization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        '500':
          description: Server encountered an unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
    post:
      summary: Create an organization case
      description: Creates a new case for a specific organization
      operationId: relex_backend_create_case
      security:
        - firebase: []
      x-google-backend:
        address: '${function_uris["relex-backend-create-case"]}'
        path_translation: CONSTANT_ADDRESS
        deadline: 30.0
      parameters:
        - name: organizationId
          in: path
          required: true
          description: The unique identifier of the organization
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCaseRequest'
      responses:
        '201':
          description: Case created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateCaseResponse'
        '400':
          description: Invalid request format or data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: Authentication token is missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '402':
          description: Quota exhausted or no active subscription, and paymentIntentId not provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentRequired'
        '403':
          description: User does not have permission to create cases for this organization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        '500':
          description: Server encountered an unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
                
  /cases/{caseId}/assign:
    put:
      summary: Assign a case to a staff member
      description: Assigns a case to a staff member (for organization administrators only)
      operationId: relex_backend_assign_case
      security:
        - firebase: []
      x-google-backend:
        address: '${function_uris["relex-backend-assign-case"]}'
        path_translation: CONSTANT_ADDRESS
        deadline: 30.0
      parameters:
        - name: caseId
          in: path
          required: true
          description: The unique identifier of the case
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                assignedUserId:
                  type: string
                  description: User ID of the staff member to assign
              required:
                - assignedUserId
      responses:
        '200':
          description: Case successfully assigned
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Indicates successful operation
                  caseId:
                    type: string
                    description: ID of the case
                  assignedUserId:
                    type: string
                    description: User ID of the assigned staff member
                  assignedUserName:
                    type: string
                    description: Name of the assigned staff member
                required:
                  - success
                  - caseId
                  - assignedUserId
        '400':
          description: Invalid request format or missing required fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: Authentication token is missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: User does not have administrator permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        '404':
          description: Case or user not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '500':
          description: Server encountered an unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
components:
  securitySchemes:
    firebase:
      type: apiKey
      name: Authorization
      in: header
      description: 'Firebase Authentication JWT. Use format ''Bearer {token}'''
      x-google-issuer: 'https://securetoken.google.com/${project_id}'
      x-google-jwks_uri: 'https://www.googleapis.com/service_accounts/v1/metadata/x509/securetoken@system.gserviceaccount.com'
      x-google-audiences: '${project_id}'
  schemas:
    Error:
      type: object
      properties:
        error:
          type: string
          description: Error type
        message:
          type: string
          description: Error message details
      required:
        - error
        - message
    
    BadRequest:
      allOf:
        - $ref: '#/components/schemas/Error'
        - example:
            error: "Bad Request"
            message: "Invalid or missing field"
    
    Unauthorized:
      allOf:
        - $ref: '#/components/schemas/Error'
        - example:
            error: "Unauthorized" 
            message: "Authentication data missing"
    
    Forbidden:
      allOf:
        - $ref: '#/components/schemas/Error'
        - example:
            error: "Forbidden"
            message: "You do not have permission for this action"
    
    NotFound:
      allOf:
        - $ref: '#/components/schemas/Error'
        - example:
            error: "Not Found"
            message: "Resource not found"
    
    InternalServerError:
      allOf:
        - $ref: '#/components/schemas/Error'
        - example:
            error: "Internal Server Error"
            message: "An unexpected error occurred"
    
    Conflict:
      allOf:
        - $ref: '#/components/schemas/Error'
        - example:
            error: "Conflict"
            message: "Resource already exists or conflict with existing data"
    
    PayloadTooLarge:
      allOf:
        - $ref: '#/components/schemas/Error'
        - example:
            error: "Payload Too Large"
            message: "File exceeds the maximum size limit"
    
    PaymentRequired:
      allOf:
        - $ref: '#/components/schemas/Error'
        - example:
            error: "Payment Required"
            message: "Payment is required to complete this action"
          
    UserProfile:
      type: object
      properties:
        userId:
          type: string
          description: The unique identifier of the authenticated user
        email:
          type: string
          description: Email address of the user
        displayName:
          type: string
          description: Display name of the user
        photoURL:
          type: string
          description: URL to the user's profile photo
        role:
          type: string
          description: User's role in the system
        subscriptionStatus:
          type: string
          description: Status of the user's subscription
          nullable: true
        languagePreference:
          type: string
          description: User's preferred language
          enum: [en, ro, fr, de, es]
        createdAt:
          type: string
          format: date-time
          description: Timestamp when the user profile was created
        updatedAt:
          type: string
          format: date-time
          description: Timestamp when the user profile was last updated
      required:
        - userId
        - email
        - displayName

    # Case schemas based on actual implementation
    Case:
      type: object
      properties:
        caseId:
          type: string
          description: Unique identifier for the case
        userId:
          type: string
          description: ID of the user who created the case
        title:
          type: string
          description: Title of the case
        description:
          type: string
          description: Description of the case
        status:
          type: string
          description: Status of the case
          enum: [open, closed, archived, deleted]
        caseTier:
          type: integer
          description: Case tier level determining the price (1, 2, or 3)
        caseTypeId:
          type: string
          description: The ID of the case type for this case
        casePrice:
          type: integer
          description: Price of the case in cents
        paymentStatus:
          type: string
          description: Status of the payment for this case
        creationDate:
          type: string
          format: date-time
          description: Timestamp when the case was created
        organizationId:
          type: string
          description: ID of the organization if this is an organization case
          nullable: true
      required:
        - caseId
        - userId
        - title
        - description
        - status
        - caseTier
        - caseTypeId

    CaseSummary:
      type: object
      properties:
        caseId:
          type: string
          description: Unique identifier for the case
        title:
          type: string
          description: Title of the case
        status:
          type: string
          description: Status of the case
        creationDate:
          type: string
          format: date-time
          description: Timestamp when the case was created
      required:
        - caseId
        - title
        - status

    CreateCaseRequest:
      type: object
      properties:
        title:
          type: string
          description: Title of the case
        description:
          type: string
          description: Description of the case
        caseTier:
          type: integer
          description: Case tier level determining the price (1=€9.00, 2=€29.00, 3=€99.00)
          enum: [1, 2, 3]
        caseTypeId:
          type: string
          description: The ID of the case type for this case
        organizationId:
          type: string
          description: Organization ID if creating a case for an organization
        paymentIntentId:
          type: string
          description: Stripe payment intent ID (optional if user/organization has an active subscription with available quota)
        initialPartyIds:
          type: array
          description: Optional array of party IDs to attach initially
          items:
            type: string
        assignedUserId:
          type: string
          description: Optional staff user ID to assign the case to
      required:
        - title
        - description
        - caseTier
        - caseTypeId

    CreateCaseResponse:
      type: object
      properties:
        caseId:
          type: string
          description: Unique identifier for the case
        status:
          type: string
          description: Status of the case (initially "open")
      required:
        - caseId
        - status

    # Organization schemas based on actual implementation
    Organization:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier of the organization
        name:
          type: string
          description: Name of the organization
        description:
          type: string
          description: Description of the organization
        address:
          type: object
          description: Physical address of the organization
          properties:
            street:
              type: string
            city:
              type: string
            state:
              type: string
            zipCode:
              type: string
            country:
              type: string
        contactInfo:
          type: object
          description: Contact information for the organization
          properties:
            email:
              type: string
              format: email
            phone:
              type: string
            website:
              type: string
              format: uri
        createdBy:
          type: string
          description: User ID of the creator
        createdAt:
          type: string
          format: date-time
          description: Timestamp when the organization was created
        updatedAt:
          type: string
          format: date-time
          description: Timestamp when the organization was last updated
        subscriptionStatus:
          type: string
          description: Current subscription status
          nullable: true
        stripeCustomerId:
          type: string
          description: Stripe customer ID
          nullable: true
        stripeSubscriptionId:
          type: string
          description: Stripe subscription ID
          nullable: true
        subscriptionPlanId:
          type: string
          description: Subscription plan ID
          nullable: true
        caseQuotaTotal:
          type: integer
          description: Total case quota
        caseQuotaUsed:
          type: integer
          description: Used case quota
        billingCycleStart:
          type: string
          format: date-time
          description: Start of billing cycle
          nullable: true
        billingCycleEnd:
          type: string
          format: date-time
          description: End of billing cycle
          nullable: true
      required:
        - id
        - name

    OrganizationSummary:
      type: object
      properties:
        organizationId:
          type: string
          description: The unique identifier of the organization
        name:
          type: string
          description: Name of the organization
        description:
          type: string
          description: Description of the organization
        role:
          type: string
          description: User's role in the organization
          enum: [administrator, staff]
        joinedAt:
          type: string
          format: date-time
          description: ISO 8601 timestamp when the user joined
      required:
        - organizationId
        - name
        - role
        - joinedAt

    CreateOrganizationRequest:
      type: object
      properties:
        name:
          type: string
          description: Name of the organization
        description:
          type: string
          description: Description of the organization
        address:
          type: object
          description: Physical address of the organization
        contactInfo:
          type: object
          description: Contact information for the organization
      required:
        - name

    # Party schemas based on actual implementation
    Party:
      type: object
      properties:
        partyId:
          type: string
          description: Unique identifier for the party
        partyType:
          type: string
          description: Type of party (individual or organization)
          enum: [individual, organization]
        nameDetails:
          type: object
          description: Name details for the party
          oneOf:
            - $ref: '#/components/schemas/IndividualNameDetails'
            - $ref: '#/components/schemas/OrganizationNameDetails'
        identityCodes:
          type: object
          description: Identification codes for the party
          oneOf:
            - $ref: '#/components/schemas/IndividualIdentityCodes'
            - $ref: '#/components/schemas/OrganizationIdentityCodes'
        contactInfo:
          type: object
          description: Contact information for the party
          properties:
            address:
              type: string
              description: Address information
            email:
              type: string
              format: email
              description: Email address
            phone:
              type: string
              description: Phone number
          required:
            - address
        signatureData:
          type: object
          description: Signature data if available
          nullable: true
        userId:
          type: string
          description: ID of the user who created the party
        createdAt:
          type: string
          format: date-time
          description: ISO 8601 timestamp of creation
        updatedAt:
          type: string
          format: date-time
          description: ISO 8601 timestamp of last update
      required:
        - partyId
        - partyType
        - nameDetails
        - identityCodes
        - contactInfo
        - userId

    IndividualNameDetails:
      type: object
      properties:
        firstName:
          type: string
          description: First name
        lastName:
          type: string
          description: Last name
      required:
        - firstName
        - lastName

    OrganizationNameDetails:
      type: object
      properties:
        companyName:
          type: string
          description: Company name
      required:
        - companyName

    IndividualIdentityCodes:
      type: object
      properties:
        cnp:
          type: string
          description: CNP (Romanian personal numeric code, must be 13 digits)
      required:
        - cnp

    OrganizationIdentityCodes:
      type: object
      properties:
        cui:
          type: string
          description: CUI (fiscal identification code)
        regCom:
          type: string
          description: Registration number
      required:
        - cui
        - regCom

    CreatePartyRequest:
      type: object
      properties:
        partyType:
          type: string
          description: Type of party ("individual" or "organization")
          enum: [individual, organization]
        nameDetails:
          type: object
          description: Name details appropriate for the party type
          oneOf:
            - $ref: '#/components/schemas/IndividualNameDetails'
            - $ref: '#/components/schemas/OrganizationNameDetails'
        identityCodes:
          type: object
          description: Identification codes for the party
          oneOf:
            - $ref: '#/components/schemas/IndividualIdentityCodes'
            - $ref: '#/components/schemas/OrganizationIdentityCodes'
        contactInfo:
          type: object
          description: Contact information for the party
          properties:
            address:
              type: string
              description: Address information
            email:
              type: string
              format: email
              description: Email address
            phone:
              type: string
              description: Phone number
          required:
            - address
        signatureData:
          type: object
          description: Optional signature data for the party
      required:
        - partyType
        - nameDetails
        - identityCodes
        - contactInfo

    # Party Management Endpoints
    /parties:
      post:
        summary: Create a new party
        description: Creates a new party (individual or organization) associated with the authenticated user
        operationId: relex_backend_create_party
        security:
          - firebase: []
        x-google-backend:
          address: '${function_uris["relex-backend-create-party"]}'
          path_translation: CONSTANT_ADDRESS
          deadline: 30.0
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatePartyRequest'
        responses:
          '201':
            description: Party created successfully
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Party'
          '400':
            description: Invalid request format or missing required fields
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/BadRequest'
          '401':
            description: Authentication token is missing or invalid
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Unauthorized'
          '500':
            description: Server encountered an unexpected error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/InternalServerError'
                
    /parties/{partyId}:
      get:
        summary: Get party details
        description: Retrieves information about a specific party
        operationId: relex_backend_get_party
        security:
          - firebase: []
        x-google-backend:
          address: '${function_uris["relex-backend-get-party"]}'
          path_translation: CONSTANT_ADDRESS
          deadline: 30.0
        parameters:
          - name: partyId
            in: path
            required: true
            description: The unique identifier of the party
            schema:
              type: string
        responses:
          '200':
            description: Successfully retrieved party information
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Party'
          '400':
            description: Missing party ID
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/BadRequest'
          '401':
            description: Authentication token is missing or invalid
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Unauthorized'
          '403':
            description: User does not have permission to view this party
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Forbidden'
          '404':
            description: Party not found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/NotFound'
          '500':
            description: Server encountered an unexpected error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/InternalServerError'
      put:
        summary: Update party
        description: Updates an existing party
        operationId: relex_backend_update_party
        security:
          - firebase: []
        x-google-backend:
          address: '${function_uris["relex-backend-update-party"]}'
          path_translation: CONSTANT_ADDRESS
          deadline: 30.0
        parameters:
          - name: partyId
            in: path
            required: true
            description: The unique identifier of the party
            schema:
              type: string
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  partyId:
                    type: string
                    description: The unique identifier of the party to update
                  nameDetails:
                    type: object
                    description: Updated name details appropriate for the party type
                  identityCodes:
                    type: object
                    description: Updated identification codes for the party
                  contactInfo:
                    type: object
                    description: Updated contact information for the party
                  signatureData:
                    type: object
                    description: Updated signature data for the party. Set to null to remove.
                    nullable: true
                required:
                  - partyId
        responses:
          '200':
            description: Party successfully updated
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Party'
          '400':
            description: Invalid request format, missing required fields, or no valid fields provided for update
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/BadRequest'
          '401':
            description: Authentication token is missing or invalid
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Unauthorized'
          '403':
            description: User does not have permission to update this party
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Forbidden'
          '404':
            description: Party not found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/NotFound'
          '500':
            description: Server encountered an unexpected error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/InternalServerError'
      delete:
        summary: Delete party
        description: Deletes a party
        operationId: relex_backend_delete_party
        security:
          - firebase: []
        x-google-backend:
          address: '${function_uris["relex-backend-delete-party"]}'
          path_translation: CONSTANT_ADDRESS
          deadline: 30.0
        parameters:
          - name: partyId
            in: path
            required: true
            description: The unique identifier of the party
            schema:
              type: string
        responses:
          '204':
            description: Party successfully deleted
          '400':
            description: Missing party ID
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/BadRequest'
          '401':
            description: Authentication token is missing or invalid
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Unauthorized'
          '403':
            description: User does not have permission to delete this party
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Forbidden'
          '404':
            description: Party not found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/NotFound'
          '409':
            description: Party cannot be deleted (e.g., it is attached to cases)
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Conflict'
          '500':
            description: Server encountered an unexpected error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/InternalServerError'
                
    /cases/{caseId}/parties:
      post:
        summary: Attach party to case
        description: Attaches a party to a case
        operationId: relex_backend_attach_party
        security:
          - firebase: []
        x-google-backend:
          address: '${function_uris["relex-backend-attach-party"]}'
          path_translation: CONSTANT_ADDRESS
          deadline: 30.0
        parameters:
          - name: caseId
            in: path
            required: true
            description: The unique identifier of the case
            schema:
              type: string
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  partyId:
                    type: string
                    description: ID of the party to attach to the case
                  role:
                    type: string
                    description: Role of the party in the case (client, opposing_party, witness, etc.)
                required:
                  - partyId
                  - role
        responses:
          '200':
            description: Party successfully attached to the case
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    success:
                      type: boolean
                      description: Indicates successful operation
                    caseId:
                      type: string
                      description: ID of the case
                    partyId:
                      type: string
                      description: ID of the attached party
                    role:
                      type: string
                      description: Role of the party in the case
                required:
                  - success
                  - caseId
                  - partyId
                  - role
          '400':
            description: Invalid request format or missing required fields
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/BadRequest'
          '401':
            description: Authentication token is missing or invalid
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Unauthorized'
          '403':
            description: User does not have permission to attach parties to this case
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Forbidden'
          '404':
            description: Case or party not found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/NotFound'
          '409':
            description: Party is already attached to the case
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Conflict'
          '500':
            description: Server encountered an unexpected error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/InternalServerError'
                
    /cases/{caseId}/parties/{partyId}:
      delete:
        summary: Detach party from case
        description: Detaches a party from a case
        operationId: relex_backend_detach_party
        security:
          - firebase: []
        x-google-backend:
          address: '${function_uris["relex-backend-detach-party"]}'
          path_translation: CONSTANT_ADDRESS
          deadline: 30.0
        parameters:
          - name: caseId
            in: path
            required: true
            description: The unique identifier of the case
            schema:
              type: string
          - name: partyId
            in: path
            required: true
            description: The unique identifier of the party to detach
            schema:
              type: string
        responses:
          '200':
            description: Party successfully detached from the case
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    success:
                      type: boolean
                      description: Indicates successful operation
                    caseId:
                      type: string
                      description: ID of the case
                    partyId:
                      type: string
                      description: ID of the detached party
                required:
                  - success
                  - caseId
                  - partyId
          '401':
            description: Authentication token is missing or invalid
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Unauthorized'
          '403':
            description: User does not have permission to detach parties from this case
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Forbidden'
          '404':
            description: Case or party not found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/NotFound'
          '500':
            description: Server encountered an unexpected error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/InternalServerError'
                
    # File Management Endpoints
    /cases/{caseId}/files:
      post:
        summary: Upload file to case
        description: Uploads a file to a specific case
        operationId: relex_backend_upload_file
        security:
          - firebase: []
        x-google-backend:
          address: '${function_uris["relex-backend-upload-file"]}'
          path_translation: CONSTANT_ADDRESS
          deadline: 60.0
        parameters:
          - name: caseId
            in: path
            required: true
            description: The unique identifier of the case
            schema:
              type: string
        requestBody:
          required: true
          content:
            multipart/form-data:
              schema:
                type: object
                properties:
                  file:
                    type: string
                    format: binary
                    description: The file to be uploaded
                required:
                  - file
        responses:
          '201':
            description: File successfully uploaded
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    fileId:
                      type: string
                      description: Unique identifier for the uploaded file
                    fileName:
                      type: string
                      description: Name of the uploaded file
                    contentType:
                      type: string
                      description: MIME type of the file
                    size:
                      type: integer
                      description: Size of the file in bytes
                    caseId:
                      type: string
                      description: ID of the case the file is attached to
                    uploadedBy:
                      type: string
                      description: User ID of the uploader
                    uploadedAt:
                      type: string
                      format: date-time
                      description: ISO 8601 timestamp of the upload time
                    downloadUrl:
                      type: string
                      description: URL to download the file (time-limited)
                required:
                  - fileId
                  - fileName
                  - contentType
                  - size
                  - caseId
                  - uploadedBy
                  - uploadedAt
          '400':
            description: Invalid request format or missing required file
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/BadRequest'
          '401':
            description: Authentication token is missing or invalid
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Unauthorized'
          '403':
            description: User does not have permission to upload files to this case
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Forbidden'
          '404':
            description: Case not found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/NotFound'
          '413':
            description: File exceeds the maximum size limit
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/PayloadTooLarge'
          '500':
            description: Server encountered an unexpected error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/InternalServerError'
                
    /cases/{caseId}/files/{fileId}:
      get:
        summary: Download file
        description: Downloads a file associated with a specific case
        operationId: relex_backend_download_file
        security:
          - firebase: []
        x-google-backend:
          address: '${function_uris["relex-backend-download-file"]}'
          path_translation: CONSTANT_ADDRESS
          deadline: 60.0
        parameters:
          - name: caseId
            in: path
            required: true
            description: The unique identifier of the case
            schema:
              type: string
          - name: fileId
            in: path
            required: true
            description: The unique identifier of the file
            schema:
              type: string
        responses:
          '200':
            description: Successfully fetched the file (returns binary file data with appropriate headers)
            content:
              application/octet-stream:
                schema:
                  type: string
                  format: binary
          '401':
            description: Authentication token is missing or invalid
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Unauthorized'
          '403':
            description: User does not have permission to download this file
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Forbidden'
          '404':
            description: File or case not found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/NotFound'
          '500':
            description: Server encountered an unexpected error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/InternalServerError'

    # User Management Endpoints
    /users/me:
      get:
        summary: Get user profile
        description: Retrieves the profile of the authenticated user
        operationId: relex_backend_get_user_profile
        security:
          - firebase: []
        x-google-backend:
          address: '${function_uris["relex-backend-get-user-profile"]}'
          path_translation: CONSTANT_ADDRESS
          deadline: 30.0
        responses:
          '200':
            description: Successfully retrieved user profile
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/UserProfile'
          '401':
            description: Authentication token is missing or invalid
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Unauthorized'
          '404':
            description: User profile not found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/NotFound'
          '500':
            description: Server encountered an unexpected error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/InternalServerError'
      put:
        summary: Update user profile
        description: Updates the profile of the authenticated user
        operationId: relex_backend_update_user_profile
        security:
          - firebase: []
        x-google-backend:
          address: '${function_uris["relex-backend-update-user-profile"]}'
          path_translation: CONSTANT_ADDRESS
          deadline: 30.0
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  displayName:
                    type: string
                    description: New display name for the user
                  photoURL:
                    type: string
                    description: New URL to the user's profile photo
                  languagePreference:
                    type: string
                    description: New preferred language
                    enum: [en, ro, fr, de, es]
        responses:
          '200':
            description: User profile successfully updated
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/UserProfile'
          '400':
            description: Invalid request format or data
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/BadRequest'
          '401':
            description: Authentication token is missing or invalid
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Unauthorized'
          '404':
            description: User profile not found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/NotFound'
          '500':
            description: Server encountered an unexpected error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/InternalServerError'
                
    /users/me/organizations:
      get:
        summary: List user's organizations
        description: Lists all organizations the authenticated user is a member of
        operationId: relex_backend_list_user_organizations
        security:
          - firebase: []
        x-google-backend:
          address: '${function_uris["relex-backend-list-user-organizations"]}'
          path_translation: CONSTANT_ADDRESS
          deadline: 30.0
        responses:
          '200':
            description: Successfully retrieved the list of organizations
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    organizations:
                      type: array
                      items:
                        $ref: '#/components/schemas/OrganizationSummary'
                  required:
                    - organizations
          '401':
            description: Authentication token is missing or invalid
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Unauthorized'
          '500':
            description: Server encountered an unexpected error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/InternalServerError'
                
    # Organization Management Endpoints
    /organizations:
      post:
        summary: Create a new organization
        description: Creates a new organization and adds the authenticated user as an administrator
        operationId: relex_backend_create_organization
        security:
          - firebase: []
        x-google-backend:
          address: '${function_uris["relex-backend-create-organization"]}'
          path_translation: CONSTANT_ADDRESS
          deadline: 30.0
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateOrganizationRequest'
        responses:
          '201':
            description: Organization successfully created
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Organization'
          '400':
            description: Invalid request format or missing required fields
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/BadRequest'
          '401':
            description: Authentication token is missing or invalid
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Unauthorized'
          '500':
            description: Server encountered an unexpected error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/InternalServerError'
                
    /organizations/{organizationId}:
      get:
        summary: Get organization details
        description: Retrieves information about a specific organization
        operationId: relex_backend_get_organization
        security:
          - firebase: []
        x-google-backend:
          address: '${function_uris["relex-backend-get-organization"]}'
          path_translation: CONSTANT_ADDRESS
          deadline: 30.0
        parameters:
          - name: organizationId
            in: path
            required: true
            description: The unique identifier of the organization
            schema:
              type: string
        responses:
          '200':
            description: Successfully retrieved organization information
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Organization'
          '400':
            description: Missing organization ID parameter
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/BadRequest'
          '401':
            description: Authentication token is missing or invalid
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Unauthorized'
          '403':
            description: User does not have permission to access this organization
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Forbidden'
          '404':
            description: Organization not found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/NotFound'
          '500':
            description: Server encountered an unexpected error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/InternalServerError'
      put:
        summary: Update organization
        description: Updates an existing organization
        operationId: relex_backend_update_organization
        security:
          - firebase: []
        x-google-backend:
          address: '${function_uris["relex-backend-update-organization"]}'
          path_translation: CONSTANT_ADDRESS
          deadline: 30.0
        parameters:
          - name: organizationId
            in: path
            required: true
            description: The unique identifier of the organization
            schema:
              type: string
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  organizationId:
                    type: string
                    description: The unique identifier of the organization
                  name:
                    type: string
                    description: Name of the organization
                  description:
                    type: string
                    description: Description of the organization
                  address:
                    type: object
                    description: Physical address of the organization
                  contactInfo:
                    type: object
                    description: Contact information for the organization
                required:
                  - organizationId
        responses:
          '200':
            description: Organization successfully updated
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Organization'
          '400':
            description: Invalid request format or data
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/BadRequest'
          '401':
            description: Authentication token is missing or invalid
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Unauthorized'
          '403':
            description: User does not have permission to update this organization
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Forbidden'
          '404':
            description: Organization not found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/NotFound'
          '500':
            description: Server encountered an unexpected error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/InternalServerError'
      delete:
        summary: Delete organization
        description: Deletes an organization and related data (memberships, marks cases as deleted)
        operationId: relex_backend_delete_organization
        security:
          - firebase: []
        x-google-backend:
          address: '${function_uris["relex-backend-delete-organization"]}'
          path_translation: CONSTANT_ADDRESS
          deadline: 30.0
        parameters:
          - name: organizationId
            in: path
            required: true
            description: The unique identifier of the organization
            schema:
              type: string
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  organizationId:
                    type: string
                    description: The unique identifier of the organization
                required:
                  - organizationId
        responses:
          '200':
            description: Organization successfully deleted
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
                      example: Organization deleted successfully
          '400':
            description: Invalid request format or data
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/BadRequest'
          '401':
            description: Authentication token is missing or invalid
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Unauthorized'
          '403':
            description: User does not have permission to delete this organization
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Forbidden'
          '404':
            description: Organization not found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/NotFound'
          '500':
            description: Server encountered an unexpected error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/InternalServerError'
                
    /organizations/{organizationId}/members:
      post:
        summary: Add member to organization
        description: Adds a user to an organization
        operationId: relex_backend_add_organization_member
        security:
          - firebase: []
        x-google-backend:
          address: '${function_uris["relex-backend-add-organization-member"]}'
          path_translation: CONSTANT_ADDRESS
          deadline: 30.0
        parameters:
          - name: organizationId
            in: path
            required: true
            description: The unique identifier of the organization
            schema:
              type: string
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  organizationId:
                    type: string
                    description: The unique identifier of the organization
                  userId:
                    type: string
                    description: The unique identifier of the user to add
                  role:
                    type: string
                    description: The user's role in the organization
                    enum: [administrator, staff]
                    default: staff
                required:
                  - organizationId
                  - userId
        responses:
          '201':
            description: User successfully added to the organization
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    success:
                      type: boolean
                      description: Indicates successful operation
                    membershipId:
                      type: string
                      description: Unique identifier for the membership
                    userId:
                      type: string
                      description: ID of the user added to the organization
                    organizationId:
                      type: string
                      description: ID of the organization
                    role:
                      type: string
                      description: Role of the user in the organization
                    email:
                      type: string
                      description: Email of the added user
                    displayName:
                      type: string
                      description: Display name of the added user
                  required:
                    - success
                    - membershipId
                    - userId
                    - organizationId
                    - role
          '400':
            description: Invalid request format or missing required fields
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/BadRequest'
          '401':
            description: Authentication token is missing or invalid
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Unauthorized'
          '403':
            description: User does not have permission to add members to this organization
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Forbidden'
          '404':
            description: Organization or target user not found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/NotFound'
          '409':
            description: User is already a member of the organization
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Conflict'
          '500':
            description: Server encountered an unexpected error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/InternalServerError'
      get:
        summary: List organization members
        description: Lists all members of an organization
        operationId: relex_backend_list_organization_members
        security:
          - firebase: []
        x-google-backend:
          address: '${function_uris["relex-backend-list-organization-members"]}'
          path_translation: CONSTANT_ADDRESS
          deadline: 30.0
        parameters:
          - name: organizationId
            in: path
            required: true
            description: The unique identifier of the organization
            schema:
              type: string
        responses:
          '200':
            description: Successfully retrieved the list of members
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    members:
                      type: array
                      items:
                        type: object
                        properties:
                          userId:
                            type: string
                            description: ID of the member
                          role:
                            type: string
                            description: Role in the organization
                            enum: [administrator, staff]
                          addedAt:
                            type: string
                            format: date-time
                            description: Timestamp when the member was added
                          email:
                            type: string
                            description: Email of the member
                          displayName:
                            type: string
                            description: Display name of the member
                        required:
                          - userId
                          - role
                          - addedAt
                  required:
                    - members
          '401':
            description: Authentication token is missing or invalid
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Unauthorized'
          '403':
            description: User does not have permission to view members of this organization
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Forbidden'
          '404':
            description: Organization not found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/NotFound'
          '500':
            description: Server encountered an unexpected error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/InternalServerError'
                
    /organizations/{organizationId}/members/{userId}:
      put:
        summary: Update member role
        description: Updates a member's role in the organization
        operationId: relex_backend_set_organization_member_role
        security:
          - firebase: []
        x-google-backend:
          address: '${function_uris["relex-backend-set-organization-member-role"]}'
          path_translation: CONSTANT_ADDRESS
          deadline: 30.0
        parameters:
          - name: organizationId
            in: path
            required: true
            description: The unique identifier of the organization
            schema:
              type: string
          - name: userId
            in: path
            required: true
            description: The unique identifier of the user
            schema:
              type: string
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  newRole:
                    type: string
                    description: The new role for the member
                    enum: [administrator, staff]
                required:
                  - newRole
        responses:
          '200':
            description: Member role successfully updated
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    success:
                      type: boolean
                      description: Indicates successful operation
                    membershipId:
                      type: string
                      description: Unique identifier for the membership
                    userId:
                      type: string
                      description: ID of the user
                    organizationId:
                      type: string
                      description: ID of the organization
                    role:
                      type: string
                      description: New role of the user in the organization
                    email:
                      type: string
                      description: Email of the user
                    displayName:
                      type: string
                      description: Display name of the user
                  required:
                    - success
                    - membershipId
                    - userId
                    - organizationId
                    - role
          '400':
            description: Invalid request format or missing required fields
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/BadRequest'
          '401':
            description: Authentication token is missing or invalid
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Unauthorized'
          '403':
            description: User does not have permission to update member roles in this organization
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Forbidden'
          '404':
            description: Organization, membership, or user not found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/NotFound'
          '500':
            description: Server encountered an unexpected error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/InternalServerError'
    delete:
      summary: Remove member
      description: Removes a member from an organization
      operationId: relex_backend_remove_organization_member
      security:
        - firebase: []
      x-google-backend:
        address: '${function_uris["relex-backend-remove-organization-member"]}'
        path_translation: CONSTANT_ADDRESS
        deadline: 30.0
      parameters:
        - name: organizationId
          in: path
          required: true
          description: The unique identifier of the organization
          schema:
            type: string
        - name: userId
          in: path
          required: true
          description: The unique identifier of the user to remove
          schema:
            type: string
      responses:
        '200':
          description: Member successfully removed from the organization
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Indicates successful operation
                  userId:
                    type: string
                    description: ID of the removed user
                  organizationId:
                    type: string
                    description: ID of the organization
                required:
                  - success
                  - userId
                  - organizationId
        '401':
          description: Authentication token is missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: User does not have permission to remove members from this organization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        '404':
          description: Organization, membership, or user not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '500':
          description: Server encountered an unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'

    # Agent Interaction Endpoints
    /cases/{caseId}/agent/messages:
      post:
        summary: Interact with the Lawyer AI Agent
        description: Interact with the Lawyer AI Agent for a specific case
        operationId: relex_backend_agent_handler
        security:
          - firebase: []
        x-google-backend:
          address: '${function_uris["relex-backend-agent-handler"]}'
          path_translation: CONSTANT_ADDRESS
          deadline: 300.0
        parameters:
          - name: caseId
            in: path
            required: true
            description: The unique identifier of the case
            schema:
              type: string
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: The user's message or query to the agent
                required:
                  - message
        responses:
          '200':
            description: Successfully processed the agent request
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    status:
                      type: string
                      description: Status of the operation ('success' or 'error')
                    message:
                      type: string
                      description: The agent's response message
                    timestamp:
                      type: string
                      format: date-time
                      description: ISO 8601 timestamp of when the response was generated
                    metadata:
                      type: object
                      description: Optional metadata about the response
                      properties:
                        confidence_score:
                          type: number
                          description: Agent's confidence in the response (0-1)
                        execution_time:
                          type: number
                          description: Time taken to process the request in seconds
                        risks:
                          type: array
                          description: Potential risks identified by the agent
                          items:
                            type: string
                  required:
                    - status
                    - message
                    - timestamp
          '400':
            description: Invalid request format or missing required fields
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    status:
                      type: string
                      description: Error status
                    message:
                      type: string
                      description: Error message details
                    timestamp:
                      type: string
                      format: date-time
                      description: ISO 8601 timestamp of the error
                  required:
                    - status
                    - message
                    - timestamp
          '401':
            description: Authentication token is missing or invalid
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    status:
                      type: string
                      description: Error status
                    message:
                      type: string
                      description: Error message details
                    timestamp:
                      type: string
                      format: date-time
                      description: ISO 8601 timestamp of the error
                  required:
                    - status
                    - message
                    - timestamp
          '403':
            description: User does not have permission to access this case
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    status:
                      type: string
                      description: Error status
                    message:
                      type: string
                      description: Error message details
                    timestamp:
                      type: string
                      format: date-time
                      description: ISO 8601 timestamp of the error
                  required:
                    - status
                    - message
                    - timestamp
          '404':
            description: Case not found
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    status:
                      type: string
                      description: Error status
                    message:
                      type: string
                      description: Error message details
                    timestamp:
                      type: string
                      format: date-time
                      description: ISO 8601 timestamp of the error
                  required:
                    - status
                    - message
                    - timestamp
          '500':
            description: Server encountered an unexpected error
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    status:
                      type: string
                      description: Error status
                    message:
                      type: string
                      description: Error message details
                    error_details:
                      type: string
                      description: Optional detailed error information
                    timestamp:
                      type: string
                      format: date-time
                      description: ISO 8601 timestamp of the error
                  required:
                    - status
                    - message
                    - timestamp
                  
    # Payment Endpoints
    /products:
      get:
        summary: Get products and prices
        description: Retrieves active products and their prices from Stripe
        operationId: relex_backend_get_products
        x-google-backend:
          address: '${function_uris["relex-backend-get-products"]}'
          path_translation: CONSTANT_ADDRESS
          deadline: 30.0
        responses:
          '200':
            description: Successfully retrieved products information
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    subscriptions:
                      type: array
                      description: List of subscription products
                      items:
                        type: object
                        properties:
                          id:
                            type: string
                            description: Stripe product ID
                          name:
                            type: string
                            description: Product name
                          description:
                            type: string
                            description: Product description
                          plan_type:
                            type: string
                            description: Type of plan (individual, org_basic, etc.)
                          price:
                            type: object
                            description: Price information
                            properties:
                              id:
                                type: string
                                description: Stripe price ID
                              amount:
                                type: integer
                                description: Price amount in smallest currency unit (e.g., cents)
                              currency:
                                type: string
                                description: Three-letter ISO currency code (e.g., "eur")
                              type:
                                type: string
                                description: Price type ("recurring" or "one_time")
                              recurring:
                                type: object
                                description: Present only for subscription products
                                properties:
                                  interval:
                                    type: string
                                    description: Billing interval ("month" or "year")
                                  interval_count:
                                    type: integer
                                    description: Number of intervals between billings
                          required:
                            - id
                            - name
                            - price
                    cases:
                      type: array
                      description: List of case tier products
                      items:
                        type: object
                        properties:
                          id:
                            type: string
                            description: Stripe product ID
                          name:
                            type: string
                            description: Product name
                          description:
                            type: string
                            description: Product description
                          tier:
                            type: integer
                            description: Case tier level (1, 2, or 3)
                          price:
                            type: object
                            description: Price information
                            properties:
                              id:
                                type: string
                                description: Stripe price ID
                              amount:
                                type: integer
                                description: Price amount in smallest currency unit (e.g., cents)
                              currency:
                                type: string
                                description: Three-letter ISO currency code (e.g., "eur")
                              type:
                                type: string
                                description: Price type ("recurring" or "one_time")
                          required:
                            - id
                            - name
                            - tier
                            - price
                  required:
                    - subscriptions
                    - cases
          '500':
            description: Server encountered an unexpected error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/InternalServerError'
                
    /webhooks/stripe:
      post:
        summary: Stripe webhook handler
        description: Handles incoming Stripe webhook events
        operationId: relex_backend_handle_stripe_webhook
        x-google-backend:
          address: '${function_uris["relex-backend-handle-stripe-webhook"]}'
          path_translation: CONSTANT_ADDRESS
          deadline: 60.0
        responses:
          '200':
            description: Successfully processed the webhook event
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    received:
                      type: boolean
                      description: Indicates the event was received
                    type:
                      type: string
                      description: The type of event that was processed
                  required:
                    - received
                    - type
          '400':
            description: Invalid request format or missing required information
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/BadRequest'
          '500':
            description: Server encountered an unexpected error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/InternalServerError'
                
    # Authentication Endpoints
    /auth/validate-user:
      get:
        summary: Validate user
        description: Validates the authenticated user
        operationId: relex_backend_validate_user
        security:
          - firebase: []
        x-google-backend:
          address: '${function_uris["relex-backend-validate-user"]}'
          path_translation: CONSTANT_ADDRESS
          deadline: 30.0
        responses:
          '200':
            description: User successfully validated
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    valid:
                      type: boolean
                      description: Indicates if the user is valid
                    userId:
                      type: string
                      description: ID of the validated user
                    email:
                      type: string
                      description: Email of the validated user
                    displayName:
                      type: string
                      description: Display name of the validated user
                  required:
                    - valid
                    - userId
          '401':
            description: Authentication token is missing or invalid
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Unauthorized'
          '500':
            description: Server encountered an unexpected error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/InternalServerError'
                
    /auth/check-permissions:
      post:
        summary: Check permissions
        description: Checks if the user has the specified permissions
        operationId: relex_backend_check_permissions
        security:
          - firebase: []
        x-google-backend:
          address: '${function_uris["relex-backend-check-permissions"]}'
          path_translation: CONSTANT_ADDRESS
          deadline: 30.0
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId:
                    type: string
                    description: ID of the user to check permissions for
                  resourceType:
                    type: string
                    description: Type of resource (case, organization, etc.)
                  resourceId:
                    type: string
                    description: ID of the resource
                  action:
                    type: string
                    description: Action to check (read, write, create, etc.)
                  organizationId:
                    type: string
                    description: Organization ID if relevant
                required:
                  - userId
                  - resourceType
                  - action
        responses:
          '200':
            description: Permission check completed
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    hasPermission:
                      type: boolean
                      description: Indicates if the user has the specified permission
                    message:
                      type: string
                      description: Additional information about the permission check
                  required:
                    - hasPermission
          '400':
            description: Invalid request format or missing required fields
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/BadRequest'
          '500':
            description: Server encountered an unexpected error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/InternalServerError'
                
    /auth/user-role:
      get:
        summary: Get user role
        description: Gets the role of the authenticated user
        operationId: relex_backend_get_user_role
        security:
          - firebase: []
        x-google-backend:
          address: '${function_uris["relex-backend-get-user-role"]}'
          path_translation: CONSTANT_ADDRESS
          deadline: 30.0
        responses:
          '200':
            description: Successfully retrieved user role
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    role:
                      type: string
                      description: Role of the user
                    userId:
                      type: string
                      description: ID of the user
                  required:
                    - role
                    - userId
          '401':
            description: Authentication token is missing or invalid
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Unauthorized'
          '500':
            description: Server encountered an unexpected error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/InternalServerError'
