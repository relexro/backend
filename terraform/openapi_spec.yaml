swagger: "2.0"
info:
  title: Relex API
  description: RESTful API for Relex Backend
  version: 1.0.0
# Consider making host dynamic if you have different envs: host: ${api_domain}
host: api.relex.ro
basePath: /v1
schemes:
  - https
security:
  - firebase: []

securityDefinitions:
  firebase: # This is the correct definition name used elsewhere
    type: http
    scheme: bearer
    bearerFormat: JWT
    x-google-issuer: "https://securetoken.google.com/${project_id}"
    x-google-jwks_uri: "https://www.googleapis.com/service_accounts/v1/metadata/x509/securetoken@system.gserviceaccount.com"
    x-google-audiences: "${project_id}"

paths:
  # User profile endpoints
  /users/me:
    get:
      summary: Get user profile
      operationId: getUserProfile
      security:
        - firebase: []
      x-google-backend:
        address: ${function_uris["relex-backend-get-user-profile"]}
        path_translation: CONSTANT_ADDRESS
        deadline: 30.0
      responses:
        '200':
          description: User profile
          schema:
            $ref: '#/definitions/UserProfile'
        '401':
          $ref: '#/definitions/Unauthorized'
        '404':
          $ref: '#/definitions/NotFound'
        '500':
          $ref: '#/definitions/InternalServerError'
    put:
      summary: Update user profile
      operationId: updateUserProfile
      security:
        - firebase: []
      x-google-backend:
        address: ${function_uris["relex-backend-update-user-profile"]}
        path_translation: CONSTANT_ADDRESS
        deadline: 30.0
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              displayName:
                type: string
              photoURL:
                type: string
              languagePreference:
                type: string
                enum: [en, ro]
      responses:
        '200':
          description: User profile updated
          schema:
            $ref: '#/definitions/UserProfile'
        '400':
          $ref: '#/definitions/BadRequest'
        '401':
          $ref: '#/definitions/Unauthorized'
        '404':
          $ref: '#/definitions/NotFound'
        '500':
          $ref: '#/definitions/InternalServerError'

  /users/me/organizations:
    get:
      summary: List user's organizations
      operationId: listMyOrganizations
      security:
        - firebase: []
      x-google-backend:
        address: ${function_uris["relex-backend-list-user-organizations"]}
        path_translation: CONSTANT_ADDRESS
        deadline: 30.0
      responses:
        '200':
          description: List of organizations
          schema:
            type: object
            properties:
              organizations:
                type: array
                items:
                  $ref: '#/definitions/OrganizationSummary'
        '401':
          $ref: '#/definitions/Unauthorized'
        '500':
          $ref: '#/definitions/InternalServerError'

  /users/me/cases:
    get:
      summary: List user's individual cases
      operationId: listMyCases
      security:
        - firebase: []
      x-google-backend:
        address: ${function_uris["relex-backend-list-cases"]}
        path_translation: CONSTANT_ADDRESS
        deadline: 30.0
      parameters:
        - name: status
          in: query
          required: false
          type: string
          enum: [open, archived, deleted]
        - name: limit
          in: query
          required: false
          type: integer
        - name: offset
          in: query
          required: false
          type: integer
        - name: labelIds
          in: query
          required: false
          type: array
          items:
            type: string
      responses:
        '200':
          description: List of cases
          schema:
            type: object
            properties:
              cases:
                type: array
                items:
                  $ref: '#/definitions/Case'
              total:
                type: integer
              limit:
                type: integer
              offset:
                type: integer
        '401':
          $ref: '#/definitions/Unauthorized'
        '500':
          $ref: '#/definitions/InternalServerError'

  # Organization endpoints
  /organizations:
    post:
      summary: Create a new organization
      operationId: createOrganization
      security:
        - firebase: []
      x-google-backend:
        address: ${function_uris["relex-backend-create-organization"]}
        path_translation: CONSTANT_ADDRESS
        deadline: 30.0
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - name
              - type
            properties:
              name:
                type: string
                description: Name of the organization
              type:
                type: string
                description: Type of organization (e.g., law_firm)
              address:
                type: string
                description: Address of the organization
              phone:
                type: string
                description: Phone number of the organization
              email:
                type: string
                description: Email of the organization
      responses:
        '201':
          description: Organization created successfully
          schema:
            $ref: '#/definitions/Organization'
        '400':
          $ref: '#/definitions/BadRequest'
        '401':
          $ref: '#/definitions/Unauthorized'
        '500':
          $ref: '#/definitions/InternalServerError'

  /organizations/{organizationId}:
    delete:
      summary: Delete an organization
      operationId: deleteOrganization
      security:
        - firebase: []
      x-google-backend:
        address: ${function_uris["relex-backend-delete-organization"]}
        path_translation: CONSTANT_ADDRESS
        deadline: 30.0
      parameters:
        - name: organizationId
          in: path
          required: true
          type: string
      responses:
        '200':
          description: Organization deleted successfully
          schema:
            type: object
            properties:
              message:
                type: string
        '400':
          $ref: '#/definitions/BadRequest'
        '401':
          $ref: '#/definitions/Unauthorized'
        '403':
          $ref: '#/definitions/Forbidden'
        '404':
          $ref: '#/definitions/NotFound'
        '500':
          $ref: '#/definitions/InternalServerError'

  # Case endpoints
  /cases:
    post:
      summary: Create an individual case
      operationId: createIndividualCase
      security:
        - firebase: []
      x-google-backend:
        address: ${function_uris["relex-backend-create-case"]}
        path_translation: CONSTANT_ADDRESS
        deadline: 30.0
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - title
              - description
              - caseTier
            properties:
              title:
                type: string
                description: Title of the case
              description:
                type: string
                description: Description of the case
              paymentIntentId:
                type: string
                description: Stripe payment intent ID (optional if user has an active subscription with available quota)
              caseTier:
                type: integer
                enum: [1, 2, 3]
                description: Case tier level determining the price (1=€9.00, 2=€29.00, 3=€99.00)
              initialPartyIds:
                type: array
                items:
                  type: string
                description: Optional array of party IDs to attach initially
      responses:
        '201':
          description: Case created successfully
          schema:
            $ref: '#/definitions/Case'
        '400':
          $ref: '#/definitions/BadRequest'
        '401':
          $ref: '#/definitions/Unauthorized'
        '402':
          description: Payment required (quota exhausted or no active subscription)
          schema: # Added schema ref
            $ref: '#/definitions/PaymentRequired'
        '403':
          $ref: '#/definitions/Forbidden'
        '500':
          $ref: '#/definitions/InternalServerError'

  /organizations/{organizationId}/cases:
    post:
      summary: Create an organization case
      operationId: createOrganizationCase
      security:
        - firebase: []
      x-google-backend:
        address: ${function_uris["relex-backend-create-case"]}
        path_translation: CONSTANT_ADDRESS
        deadline: 30.0
      parameters:
        - name: organizationId
          in: path
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - title
              - description
              - caseTier
            properties:
              title:
                type: string
                description: Title of the case
              description:
                type: string
                description: Description of the case
              paymentIntentId:
                type: string
                description: Stripe payment intent ID (optional if organization has an active subscription with available quota)
              caseTier:
                type: integer
                enum: [1, 2, 3]
                description: Case tier level determining the price (1=€9.00, 2=€29.00, 3=€99.00)
              initialPartyIds:
                type: array
                items:
                  type: string
                description: Optional array of party IDs to attach initially
              assignedUserId:
                type: string
                description: Optional staff user ID to assign the case to
      responses:
        '201':
          description: Case created successfully
          schema:
            $ref: '#/definitions/Case'
        '400':
          $ref: '#/definitions/BadRequest'
        '401':
          $ref: '#/definitions/Unauthorized'
        '402':
          description: Payment required (quota exhausted or no active subscription)
          schema: # Added schema ref
            $ref: '#/definitions/PaymentRequired'
        '403':
          $ref: '#/definitions/Forbidden'
        '500':
          $ref: '#/definitions/InternalServerError'
    get:
      summary: List organization cases
      operationId: listOrganizationCases
      security:
        - firebase: []
      x-google-backend:
        address: ${function_uris["relex-backend-list-cases"]}
        path_translation: CONSTANT_ADDRESS
        deadline: 30.0
      parameters:
        - name: organizationId
          in: path
          required: true
          type: string
        - name: status
          in: query
          required: false
          type: string
          enum: [open, archived, deleted]
        - name: limit
          in: query
          required: false
          type: integer
        - name: offset
          in: query
          required: false
          type: integer
        - name: labelIds
          in: query
          required: false
          type: array
          items:
            type: string
        - name: assignedUserId
          in: query
          required: false
          type: string
          description: Filter by assigned staff member (admin only)
      responses:
        '200':
          description: List of cases
          schema:
            type: object
            properties:
              cases:
                type: array
                items:
                  $ref: '#/definitions/Case'
              total:
                type: integer
              limit:
                type: integer
              offset:
                type: integer
        '400':
          $ref: '#/definitions/BadRequest'
        '401':
          $ref: '#/definitions/Unauthorized'
        '403':
          $ref: '#/definitions/Forbidden'
        '500':
          $ref: '#/definitions/InternalServerError'

  # Organization members endpoints
  /organizations/{organizationId}/members:
    get:
      summary: List organization members
      operationId: listOrganizationMembers
      security:
        - firebase: []
      x-google-backend:
        address: ${function_uris["relex-backend-list-organization-members"]}
        path_translation: CONSTANT_ADDRESS
        deadline: 30.0
      parameters:
        - name: organizationId
          in: path
          required: true
          type: string # Corrected from schema: { type: string }
      responses:
        '200':
          description: List of organization members
          schema: # Corrected: removed content/application/json wrapper
            type: object
            properties:
              members:
                type: array
                items:
                  $ref: '#/definitions/OrganizationMember'
        '400':
          $ref: '#/definitions/BadRequest'
        '401':
          $ref: '#/definitions/Unauthorized'
        '403':
          $ref: '#/definitions/Forbidden'
        '404':
          $ref: '#/definitions/NotFound'
        '500':
          $ref: '#/definitions/InternalServerError'
    post:
      summary: Add member to organization
      operationId: addOrganizationMember
      security:
        - firebase: []
      x-google-backend:
        address: ${function_uris["relex-backend-add-organization-member"]}
        path_translation: CONSTANT_ADDRESS
        deadline: 30.0
      parameters:
        - name: organizationId
          in: path
          required: true
          type: string # Corrected from schema: { type: string }
        - name: body # Corrected: Changed from requestBody to standard parameter
          in: body
          required: true
          schema:
            type: object
            required:
              - userId
              - role
            properties:
              userId:
                type: string
                description: ID of user to add
              role:
                type: string
                description: Role for the user (staff or administrator)
                enum: [staff, administrator] # Consider [owner, administrator, staff]
      responses:
        '200':
          description: Member added successfully
          schema: # Corrected: removed content/application/json wrapper
            $ref: '#/definitions/MembershipResponse'
        '400':
          $ref: '#/definitions/BadRequest'
        '401':
          $ref: '#/definitions/Unauthorized'
        '403':
          $ref: '#/definitions/Forbidden'
        '404':
          $ref: '#/definitions/NotFound'
        '409':
          $ref: '#/definitions/Conflict'
        '500':
          $ref: '#/definitions/InternalServerError'

  /organizations/{organizationId}/members/{userId}:
    put:
      summary: Update member role
      operationId: setOrganizationMemberRole
      security:
        - firebase: []
      x-google-backend:
        address: ${function_uris["relex-backend-set-organization-member-role"]}
        path_translation: CONSTANT_ADDRESS
        deadline: 30.0
      parameters:
        - name: organizationId
          in: path
          required: true
          type: string # Corrected from schema: { type: string }
        - name: userId
          in: path
          required: true
          type: string # Corrected from schema: { type: string }
        - name: body # Corrected: Changed from requestBody to standard parameter
          in: body
          required: true
          schema:
            type: object
            required:
              - newRole
            properties:
              newRole:
                type: string
                enum: [staff, administrator] # Consider [owner, administrator, staff]
      responses:
        '200':
          description: Member role updated successfully
          schema: # Corrected: removed content/application/json wrapper
            $ref: '#/definitions/MembershipResponse'
        '400':
          $ref: '#/definitions/BadRequest'
        '401':
          $ref: '#/definitions/Unauthorized'
        '403':
          $ref: '#/definitions/Forbidden'
        '404':
          $ref: '#/definitions/NotFound'
        '500':
          $ref: '#/definitions/InternalServerError'
    delete:
      summary: Remove member from organization
      operationId: removeOrganizationMember
      security:
        - firebase: []
      x-google-backend:
        address: ${function_uris["relex-backend-remove-organization-member"]}
        path_translation: CONSTANT_ADDRESS
        deadline: 30.0
      parameters:
        - name: organizationId
          in: path
          required: true
          type: string # Corrected from schema: { type: string }
        - name: userId
          in: path
          required: true
          type: string # Corrected from schema: { type: string }
      responses:
        '200':
          description: Member removed successfully
          schema: # Corrected: removed content/application/json wrapper
            type: object
            properties:
              success:
                type: boolean
              userId:
                type: string
              organizationId:
                type: string
        '400':
          $ref: '#/definitions/BadRequest'
        '401':
          $ref: '#/definitions/Unauthorized'
        '403':
          $ref: '#/definitions/Forbidden'
        '404':
          $ref: '#/definitions/NotFound'
        '500':
          $ref: '#/definitions/InternalServerError'

  # File endpoints
  /cases/{caseId}/files:
    post:
      summary: Upload file to a case
      operationId: uploadFile
      consumes: # Added consumes
         - multipart/form-data
      security:
        - firebase: []
      x-google-backend:
        address: ${function_uris["relex-backend-upload-file"]}
        path_translation: CONSTANT_ADDRESS
        deadline: 60.0 # Increased deadline
      parameters:
        - name: caseId
          in: path
          required: true
          type: string # Corrected from schema: { type: string }
        # Corrected: Changed from requestBody to standard parameters for file upload
        - name: file
          in: formData
          required: true
          type: file
          description: The file to upload
        - name: fileName
          in: formData
          required: false # Optional, server can derive
          type: string
          description: Original filename
      responses:
        '201':
          description: File uploaded successfully
          schema: # Corrected: removed content/application/json wrapper
            $ref: '#/definitions/FileResponse'
        '400':
          $ref: '#/definitions/BadRequest'
        '401':
          $ref: '#/definitions/Unauthorized'
        '403':
          $ref: '#/definitions/Forbidden'
        '404':
          $ref: '#/definitions/NotFound'
        '500':
          $ref: '#/definitions/InternalServerError'

  /files/{fileId}:
    get:
      summary: Download a file
      operationId: downloadFile
      produces: # Added produces
        - application/octet-stream
      security:
        - firebase: []
      x-google-backend:
        address: ${function_uris["relex-backend-download-file"]}
        path_translation: CONSTANT_ADDRESS
        deadline: 60.0 # Increased deadline
      parameters:
        - name: fileId
          in: path
          required: true
          type: string # Corrected from schema: { type: string }
      responses:
        '200':
          description: File content
          schema: # Corrected: simplified schema for binary file
            type: string
            format: binary
        '400':
          $ref: '#/definitions/BadRequest'
        '401': # Added missing responses
          $ref: '#/definitions/Unauthorized'
        '403': # Added missing responses
          $ref: '#/definitions/Forbidden'
        '404':
          $ref: '#/definitions/NotFound'
        '500':
          $ref: '#/definitions/InternalServerError'

  # Payment endpoints
  /payments/payment-intent:
    post:
      summary: Create a Stripe payment intent for case payment
      operationId: createPaymentIntent
      security:
        - firebase: []
      x-google-backend:
        address: ${function_uris["relex-backend-create-payment-intent"]}
        path_translation: CONSTANT_ADDRESS
        deadline: 30.0
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - caseTier
            properties:
              caseTier:
                type: integer
                enum: [1, 2, 3]
                description: Case tier level to determine the amount (1=€9.00, 2=€29.00, 3=€99.00)
              currency:
                type: string
                default: "eur"
                description: Currency for the payment (default is EUR)
              description:
                type: string
                description: Description of what this payment is for
              metadata:
                type: object
                description: Additional metadata to attach to the payment intent
              caseId:
                type: string
                description: Optional ID of the case this payment is for
      responses:
        '201':
          description: Payment intent created successfully
          schema:
            type: object
            properties:
              clientSecret:
                type: string
              paymentIntentId:
                type: string
              amount:
                type: integer
                description: Amount in cents
              currency:
                type: string
              message:
                type: string
        '400':
          $ref: '#/definitions/BadRequest'
        '401':
          $ref: '#/definitions/Unauthorized'
        '500':
          $ref: '#/definitions/InternalServerError'

  /payments/checkout-session:
    post:
      summary: Create a Stripe checkout session for subscription or one-time payment
      operationId: createCheckoutSession
      security:
        - firebase: []
      x-google-backend:
        address: ${function_uris["relex-backend-create-checkout-session"]}
        path_translation: CONSTANT_ADDRESS
        deadline: 30.0
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              planId:
                type: string
                description: ID of the subscription plan to purchase (e.g., 'personal_monthly', 'business_pro_yearly')
              mode:
                type: string
                default: "subscription"
                enum: ["subscription", "payment"]
                description: Checkout mode - subscription or one-time payment
              currency:
                type: string
                default: "eur"
                description: Currency for the payment (if one-time payment)
              amount:
                type: integer
                description: Amount in cents for a one-time payment (required if mode=payment)
              successUrl:
                type: string
                description: URL to redirect to after successful payment
              cancelUrl:
                type: string
                description: URL to redirect to after cancelled payment
              metadata:
                type: object
                description: Additional metadata to attach to the checkout session
              organizationId:
                type: string
                description: Optional ID of the organization this subscription is for
              caseId:
                type: string
                description: Optional ID of the case this payment is for
      responses:
        '201':
          description: Checkout session created successfully
          schema:
            type: object
            properties:
              sessionId:
                type: string
              url:
                type: string
              message:
                type: string
        '400':
          $ref: '#/definitions/BadRequest'
        '401':
          $ref: '#/definitions/Unauthorized'
        '500':
          $ref: '#/definitions/InternalServerError'

  /subscriptions/{subscriptionId}:
    delete:
      summary: Cancel a subscription
      operationId: cancelSubscription
      security:
        - firebase: []
      x-google-backend:
        address: ${function_uris["relex-backend-cancel-subscription"]}
        path_translation: CONSTANT_ADDRESS
        deadline: 30.0
      parameters:
        - name: subscriptionId
          in: path
          required: true
          type: string
          description: ID of the subscription to cancel
      responses:
        '200':
          description: Subscription cancelled successfully
          schema:
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
        '400':
          $ref: '#/definitions/BadRequest'
        '401':
          $ref: '#/definitions/Unauthorized'
        '403':
          $ref: '#/definitions/Forbidden'
        '404':
          $ref: '#/definitions/NotFound'
        '500':
          $ref: '#/definitions/InternalServerError'

  /vouchers/redeem:
    post:
      summary: Redeem a voucher code (not implemented yet)
      operationId: redeemVoucher
      security:
        - firebase: []
      x-google-backend:
        # This function is planned but not yet implemented
        address: "https://notimplemented.example.com/placeholder"
        path_translation: CONSTANT_ADDRESS
        deadline: 30.0
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - voucherCode
            properties:
              voucherCode:
                type: string
                description: The voucher code to redeem
              organizationId:
                type: string
                description: Optional ID of the organization to apply the voucher to
      responses:
        '200':
          description: Voucher redeemed successfully
          schema:
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
              voucherType:
                type: string
                enum: [free_case, subscription_discount, credit]
              value:
                type: object
                properties:
                  amount:
                    type: integer
                    description: Credit amount in cents, or discount percentage, or number of free cases
                  caseTier:
                    type: integer
                    description: Only for free_case type
              expiresAt:
                type: string
                format: date-time
        '400':
          $ref: '#/definitions/BadRequest'
        '401':
          $ref: '#/definitions/Unauthorized'
        '404':
          $ref: '#/definitions/NotFound'
        '409':
          $ref: '#/definitions/Conflict'
        '501': # Correct status for not implemented
          description: Not Implemented
          schema:
             type: object
             properties:
                error:
                  type: string
                  enum: [not_implemented]
                message:
                  type: string
        # Removed '500' as 501 is better here

  /payments/webhook:
    post:
      summary: Handle Stripe webhook events
      operationId: handleStripeWebhook
      # No security - called by Stripe
      x-google-backend:
        address: ${function_uris["relex-backend-handle-stripe-webhook"]}
        path_translation: CONSTANT_ADDRESS
        deadline: 30.0
      parameters:
        - in: header
          name: Stripe-Signature # Case sensitive
          type: string
          required: true
          description: Stripe signature header for verification
        - in: body
          name: body
          required: true
          schema:
            type: object
            description: Stripe webhook event payload (structure varies)
      responses:
        '200':
          description: Webhook processed successfully (or acknowledged)
          schema:
            type: object
            properties:
              success:
                type: boolean
                description: Indicates successful receipt/initial processing.
              message:
                type: string
                example: Received
        '400':
          description: Bad Request (e.g., missing signature, invalid payload)
          schema:
            $ref: '#/definitions/BadRequest'
        '401':
          description: Unauthorized (e.g., signature verification failed)
          schema:
            $ref: '#/definitions/Unauthorized'
        '500':
          description: Internal Server Error (failed to process event)
          schema:
            $ref: '#/definitions/InternalServerError'

  # Party endpoints
  /parties:
    post:
      summary: Create a new party
      operationId: createParty
      security:
        - firebase: []
      x-google-backend:
        address: ${function_uris["relex-backend-create-party"]}
        path_translation: CONSTANT_ADDRESS
        deadline: 30.0
      parameters:
        - in: body
          name: body
          required: true
          schema:
             $ref: '#/definitions/PartyInput' # Use input definition
      responses:
        '201':
          description: Party created successfully
          schema:
            $ref: '#/definitions/Party'
        '400':
          $ref: '#/definitions/BadRequest'
        '401':
          $ref: '#/definitions/Unauthorized'
        '500':
          $ref: '#/definitions/InternalServerError'
    get:
      summary: List parties associated with the user
      operationId: listParties
      security:
        - firebase: []
      x-google-backend:
        address: ${function_uris["relex-backend-list-parties"]}
        path_translation: CONSTANT_ADDRESS
        deadline: 30.0
      parameters:
        - name: partyType
          in: query
          required: false
          type: string
          enum: [individual, organization]
          description: Filter parties by type
        - name: limit # Added pagination
          in: query
          required: false
          type: integer
          default: 20
        - name: offset # Added pagination
          in: query
          required: false
          type: integer
          default: 0
      responses:
        '200':
          description: List of parties
          schema:
            type: object
            properties:
              parties:
                type: array
                items:
                  $ref: '#/definitions/Party'
              total: # Added pagination info
                type: integer
              limit: # Added pagination info
                type: integer
              offset: # Added pagination info
                type: integer
        '401':
          $ref: '#/definitions/Unauthorized'
        '500':
          $ref: '#/definitions/InternalServerError'

  /parties/{partyId}:
    get:
      summary: Get a party by ID
      operationId: getParty
      security:
        - firebase: []
      x-google-backend:
        address: ${function_uris["relex-backend-get-party"]}
        path_translation: CONSTANT_ADDRESS
        deadline: 30.0
      parameters:
        - name: partyId
          in: path
          required: true
          type: string
      responses:
        '200':
          description: Party details
          schema:
            $ref: '#/definitions/Party'
        '401':
          $ref: '#/definitions/Unauthorized'
        '403':
          $ref: '#/definitions/Forbidden'
        '404':
          $ref: '#/definitions/NotFound'
        '500':
          $ref: '#/definitions/InternalServerError'
    put:
      summary: Update a party
      operationId: updateParty
      security:
        - firebase: []
      x-google-backend:
        address: ${function_uris["relex-backend-update-party"]}
        path_translation: CONSTANT_ADDRESS
        deadline: 30.0
      parameters:
        - name: partyId
          in: path
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
             $ref: '#/definitions/PartyUpdateInput' # Use update definition
      responses:
        '200':
          description: Party updated successfully
          schema:
            $ref: '#/definitions/Party'
        '400':
          $ref: '#/definitions/BadRequest'
        '401':
          $ref: '#/definitions/Unauthorized'
        '403':
          $ref: '#/definitions/Forbidden'
        '404':
          $ref: '#/definitions/NotFound'
        '500':
          $ref: '#/definitions/InternalServerError'
    delete:
      summary: Delete a party
      operationId: deleteParty
      security:
        - firebase: []
      x-google-backend:
        address: ${function_uris["relex-backend-delete-party"]}
        path_translation: CONSTANT_ADDRESS
        deadline: 30.0
      parameters:
        - name: partyId
          in: path
          required: true
          type: string
      responses:
        '204': # Correct status for successful deletion with no body
          description: Party deleted successfully
        '401':
          $ref: '#/definitions/Unauthorized'
        '403':
          $ref: '#/definitions/Forbidden'
        '404':
          $ref: '#/definitions/NotFound'
        '409':
          description: Conflict - Party cannot be deleted (e.g., attached to cases)
          schema:
            $ref: '#/definitions/Conflict'
        '500':
          $ref: '#/definitions/InternalServerError'

  /cases/{caseId}/parties:
    post:
      summary: Attach a party to a case
      operationId: attachPartyToCase
      security:
        - firebase: []
      x-google-backend:
        address: ${function_uris["relex-backend-attach-party"]}
        path_translation: CONSTANT_ADDRESS
        deadline: 30.0
      parameters:
        - name: caseId
          in: path
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - partyId
            properties:
              partyId:
                type: string
                description: ID of the party to attach to the case
      responses:
        '200': # 200 is fine for updating an existing resource relationship
          description: Party attached successfully
          schema:
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
              caseId:
                type: string
              partyId:
                type: string
        '400':
          $ref: '#/definitions/BadRequest'
        '401':
          $ref: '#/definitions/Unauthorized'
        '403':
          $ref: '#/definitions/Forbidden'
        '404':
          $ref: '#/definitions/NotFound' # Case or Party not found
        '409': # Added
           description: Conflict (e.g., party already attached)
           schema:
             $ref: '#/definitions/Conflict'
        '500':
          $ref: '#/definitions/InternalServerError'

  /cases/{caseId}/parties/{partyId}:
    delete:
      summary: Detach a party from a case
      operationId: detachPartyFromCase
      security:
        - firebase: []
      x-google-backend:
        address: ${function_uris["relex-backend-detach-party"]}
        path_translation: CONSTANT_ADDRESS
        deadline: 30.0
      parameters:
        - name: caseId
          in: path
          required: true
          type: string
        - name: partyId
          in: path
          required: true
          type: string
      responses:
        '200':
          description: Party detached successfully
          schema:
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
              caseId:
                type: string
              partyId:
                type: string
        '401':
          $ref: '#/definitions/Unauthorized'
        '403':
          $ref: '#/definitions/Forbidden'
        '404':
          $ref: '#/definitions/NotFound' # Case, Party, or association not found
        '500':
          $ref: '#/definitions/InternalServerError'

  # --- Start of /api prefixed paths ---
  # These paths are kept, but corrected to be functional

  /api/stripe/webhook: # Corrected path based on original
    post:
      summary: Handle Stripe webhook events (Alternative Path)
      operationId: handleStripeWebhookAlt # Needs unique operationId
      tags:
        - Subscriptions
      consumes:
        - application/json
      produces:
        - application/json
      # No security
      x-google-backend: # Added missing backend config
        address: ${function_uris["relex-backend-handle-stripe-webhook"]}
        path_translation: CONSTANT_ADDRESS
        deadline: 30.0
      parameters:
        - in: header
          name: Stripe-Signature # Corrected case
          type: string
          required: true
          description: Stripe signature header for verification
        - in: body
          name: event # Changed name to match original path
          required: true # Added required
          schema:
            type: object
            description: Stripe webhook event payload
      responses:
        '200': # Corrected status code to string
          description: Webhook event processed successfully
          schema: # Added schema definition
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
        '400': # Corrected status code to string
          # Corrected ref path from #/responses to #/definitions
          $ref: '#/definitions/BadRequest'
        '401': # Corrected status code to string
          $ref: '#/definitions/Unauthorized'
        '500': # Corrected status code to string
          $ref: '#/definitions/InternalServerError'

  /api/parties:
    post:
      summary: Create a new party (Alternative Path)
      operationId: createPartyAlt # Needs unique operationId
      tags:
        - Parties
      security:
        - firebase: [] # Corrected security definition name
      consumes:
        - application/json
      produces:
        - application/json
      x-google-backend: # Added missing backend config
        address: ${function_uris["relex-backend-create-party"]}
        path_translation: CONSTANT_ADDRESS
        deadline: 30.0
      parameters:
        - in: body
          name: party # Kept original name
          required: true
          schema:
             $ref: '#/definitions/PartyInput' # Reference input definition
             # Removed inline definition as PartyInput exists now
      responses:
        '201': # Corrected status code to string
          description: Party created successfully
          schema:
            $ref: '#/definitions/Party'
        '400': # Corrected status code to string
          $ref: '#/definitions/BadRequest' # Corrected ref path
        '401': # Corrected status code to string
          $ref: '#/definitions/Unauthorized' # Corrected ref path
        '500': # Corrected status code to string
          $ref: '#/definitions/InternalServerError' # Corrected ref path

    get:
      summary: List parties associated with the user (Alternative Path)
      operationId: listPartiesAlt # Needs unique operationId
      tags:
        - Parties
      security:
        - firebase: [] # Corrected security definition name
      produces:
        - application/json
      x-google-backend: # Added missing backend config
        address: ${function_uris["relex-backend-list-parties"]}
        path_translation: CONSTANT_ADDRESS
        deadline: 30.0
      parameters:
        - name: partyType
          in: query
          required: false
          type: string
          enum: [individual, organization]
          description: Filter parties by type
        - name: limit # Added pagination consistent with other list op
          in: query
          required: false
          type: integer
          default: 20
        - name: offset # Added pagination consistent with other list op
          in: query
          required: false
          type: integer
          default: 0
      responses:
        '200': # Corrected status code to string
          description: List of parties
          schema:
            type: object
            properties:
              parties:
                type: array
                items:
                  $ref: '#/definitions/Party'
              total: # Added pagination info
                type: integer
              limit: # Added pagination info
                type: integer
              offset: # Added pagination info
                type: integer
        '401': # Corrected status code to string
          $ref: '#/definitions/Unauthorized' # Corrected ref path
        '500': # Corrected status code to string
          $ref: '#/definitions/InternalServerError' # Corrected ref path

  /api/parties/{partyId}:
    get:
      summary: Get a party by ID (Alternative Path)
      operationId: getPartyAlt # Needs unique operationId
      tags:
        - Parties
      security:
        - firebase: [] # Corrected security definition name
      produces:
        - application/json
      x-google-backend: # Added missing backend config
        address: ${function_uris["relex-backend-get-party"]}
        path_translation: CONSTANT_ADDRESS
        deadline: 30.0
      parameters:
        - name: partyId
          in: path
          required: true
          type: string
          description: Unique identifier for the party
      responses:
        '200': # Corrected status code to string
          description: Party details
          schema:
            $ref: '#/definitions/Party'
        '400': # Corrected status code to string
          $ref: '#/definitions/BadRequest' # Corrected ref path
        '401': # Corrected status code to string
          $ref: '#/definitions/Unauthorized' # Corrected ref path
        '404': # Corrected status code to string
          $ref: '#/definitions/NotFound' # Corrected ref path
        '500': # Corrected status code to string
          $ref: '#/definitions/InternalServerError' # Corrected ref path

    put:
      summary: Update a party (Alternative Path)
      operationId: updatePartyAlt # Needs unique operationId
      tags:
        - Parties
      security:
        - firebase: [] # Corrected security definition name
      consumes:
        - application/json
      produces:
        - application/json
      x-google-backend: # Added missing backend config
        address: ${function_uris["relex-backend-update-party"]}
        path_translation: CONSTANT_ADDRESS
        deadline: 30.0
      parameters:
        - name: partyId
          in: path
          required: true
          type: string
          description: Unique identifier for the party
        - in: body
          name: party # Kept original name
          required: true
          schema:
            $ref: '#/definitions/PartyUpdateInput' # Reference update definition
            # Removed inline definition as PartyUpdateInput exists now
      responses:
        '200': # Corrected status code to string
          description: Party updated successfully
          schema:
            $ref: '#/definitions/Party'
        '400': # Corrected status code to string
          $ref: '#/definitions/BadRequest' # Corrected ref path
        '401': # Corrected status code to string
          $ref: '#/definitions/Unauthorized' # Corrected ref path
        '404': # Corrected status code to string
          $ref: '#/definitions/NotFound' # Corrected ref path
        '500': # Corrected status code to string
          $ref: '#/definitions/InternalServerError' # Corrected ref path

    delete:
      summary: Delete a party (Alternative Path)
      operationId: deletePartyAlt # Needs unique operationId
      tags:
        - Parties
      security:
        - firebase: [] # Corrected security definition name
      produces:
        - application/json
      x-google-backend: # Added missing backend config
        address: ${function_uris["relex-backend-delete-party"]}
        path_translation: CONSTANT_ADDRESS
        deadline: 30.0
      parameters:
        - name: partyId
          in: path
          required: true
          type: string
          description: Unique identifier for the party
      responses:
        '204': # Corrected status code to string
          description: Party deleted successfully
        '400': # Corrected status code to string
          $ref: '#/definitions/BadRequest' # Corrected ref path
        '401': # Corrected status code to string
          $ref: '#/definitions/Unauthorized' # Corrected ref path
        '404': # Corrected status code to string
          $ref: '#/definitions/NotFound' # Corrected ref path
        '409': # Corrected status code to string
          description: Conflict - Party cannot be deleted (e.g., attached to cases)
          schema:
            $ref: '#/definitions/Conflict' # Corrected ref path
        '500': # Corrected status code to string
          $ref: '#/definitions/InternalServerError' # Corrected ref path

  /api/cases/{caseId}/parties:
    post:
      summary: Attach a party to a case (Alternative Path)
      operationId: attachPartyToCaseAlt # Needs unique operationId
      tags:
        - Parties
        - Cases
      security:
        - firebase: [] # Corrected security definition name
      consumes:
        - application/json
      produces:
        - application/json
      x-google-backend: # Added missing backend config
        address: ${function_uris["relex-backend-attach-party"]}
        path_translation: CONSTANT_ADDRESS
        deadline: 30.0
      parameters:
        - name: caseId
          in: path
          required: true
          type: string
          description: Unique identifier for the case
        - in: body
          name: partyAssociation # Kept original name
          required: true
          schema:
            type: object
            required:
              - partyId
            properties:
              partyId:
                type: string
                description: Unique identifier for the party to attach
      responses:
        '200': # Corrected status code to string
          description: Party successfully attached to case
          schema:
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
              caseId:
                type: string
              partyId:
                type: string
        '400': # Corrected status code to string
          $ref: '#/definitions/BadRequest' # Corrected ref path
        '401': # Corrected status code to string
          $ref: '#/definitions/Unauthorized' # Corrected ref path
        '404': # Corrected status code to string
          $ref: '#/definitions/NotFound' # Corrected ref path
        '409': # Added Conflict response consistent with non-API path
           description: Conflict (e.g., party already attached)
           schema:
             $ref: '#/definitions/Conflict'
        '500': # Corrected status code to string
          $ref: '#/definitions/InternalServerError' # Corrected ref path

  /api/cases/{caseId}/parties/{partyId}:
    delete:
      summary: Detach a party from a case (Alternative Path)
      operationId: detachPartyFromCaseAlt # Needs unique operationId
      tags:
        - Parties
        - Cases
      security:
        - firebase: [] # Corrected security definition name
      produces:
        - application/json
      x-google-backend: # Added missing backend config
        address: ${function_uris["relex-backend-detach-party"]}
        path_translation: CONSTANT_ADDRESS
        deadline: 30.0
      parameters:
        - name: caseId
          in: path
          required: true
          type: string
          description: Unique identifier for the case
        - name: partyId
          in: path
          required: true
          type: string
          description: Unique identifier for the party
      responses:
        '200': # Corrected status code to string
          description: Party successfully detached from case
          schema:
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
              caseId:
                type: string
              partyId:
                type: string
        '400': # Corrected status code to string
          $ref: '#/definitions/BadRequest' # Corrected ref path
        '401': # Corrected status code to string
          $ref: '#/definitions/Unauthorized' # Corrected ref path
        '404': # Corrected status code to string
          $ref: '#/definitions/NotFound' # Corrected ref path
        '500': # Corrected status code to string
          $ref: '#/definitions/InternalServerError' # Corrected ref path

  # Original Case Actions (GET/DELETE/ARCHIVE/ASSIGN on /cases/{caseId})
  # These were already present and mostly correct
  /cases/{caseId}:
    get:
      summary: Get case details
      operationId: getCase
      security:
        - firebase: []
      x-google-backend:
        address: ${function_uris["relex-backend-get-case"]}
        path_translation: CONSTANT_ADDRESS
        deadline: 30.0
      parameters:
        - name: caseId
          in: path
          required: true
          type: string
      responses:
        '200':
          description: Case details
          schema:
            $ref: '#/definitions/Case'
        '401':
          $ref: '#/definitions/Unauthorized'
        '403':
          $ref: '#/definitions/Forbidden'
        '404':
          $ref: '#/definitions/NotFound'
        '500':
          $ref: '#/definitions/InternalServerError'
    delete:
      summary: Delete case (mark as deleted)
      operationId: deleteCase
      security:
        - firebase: []
      x-google-backend:
        address: ${function_uris["relex-backend-delete-case"]}
        path_translation: CONSTANT_ADDRESS
        deadline: 30.0
      parameters:
        - name: caseId
          in: path
          required: true
          type: string
      responses:
        '200': # Use 200 if returning a body, 204 if not
          description: Case deleted successfully
          schema:
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
        '401':
          $ref: '#/definitions/Unauthorized'
        '403':
          $ref: '#/definitions/Forbidden'
        '404':
          $ref: '#/definitions/NotFound'
        '500':
          $ref: '#/definitions/InternalServerError'

  /cases/{caseId}/archive:
    post:
      summary: Archive case
      operationId: archiveCase
      security:
        - firebase: []
      x-google-backend:
        address: ${function_uris["relex-backend-archive-case"]}
        path_translation: CONSTANT_ADDRESS
        deadline: 30.0
      parameters:
        - name: caseId
          in: path
          required: true
          type: string
      responses:
        '200':
          description: Case archived successfully
          schema:
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
              caseId:
                type: string
              status: # Reflects new status
                type: string
                enum: [archived] # Explicitly state the outcome status
              archivedAt:
                type: string
                format: date-time
        '401':
          $ref: '#/definitions/Unauthorized'
        '403':
          $ref: '#/definitions/Forbidden'
        '404':
          $ref: '#/definitions/NotFound'
        '409': # Added conflict if already archived/deleted
           description: Conflict (e.g., case already archived or deleted)
           schema:
             $ref: '#/definitions/Conflict'
        '500':
          $ref: '#/definitions/InternalServerError'

  /cases/{caseId}/assign:
    put:
      summary: Assign case to staff member (not implemented yet)
      operationId: assignCase
      security:
        - firebase: []
      x-google-backend:
        # This function is planned but not yet implemented
        address: "https://notimplemented.example.com/placeholder"
        path_translation: CONSTANT_ADDRESS
        deadline: 30.0
      parameters:
        - name: caseId
          in: path
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            type: object
            # required: # assignedUserId not strictly required if null means unassign
            #  - assignedUserId
            properties:
              assignedUserId:
                type: string
                nullable: true # Allow null to unassign
                description: Staff user ID to assign case to, null to unassign
      responses:
        '200':
          description: Case assigned successfully
          schema:
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
              caseId:
                type: string
              assignedUserId:
                type: string
                nullable: true # Reflect possibility of null
              assignedUserName: # Might be helpful but potentially requires another lookup
                type: string
                nullable: true
        '401':
          $ref: '#/definitions/Unauthorized'
        '403':
          $ref: '#/definitions/Forbidden'
        '404':
          $ref: '#/definitions/NotFound' # Case or User could be not found
        '501': # Correct status for not implemented
          description: Not Implemented
          schema:
             type: object
             properties:
                error:
                  type: string
                  enum: [not_implemented]
                message:
                  type: string
        # Removed '500' as 501 is better here

# -------- Definitions --------
definitions:
  UserProfile:
    type: object
    properties:
      userId:
        type: string
      email:
        type: string
        format: email # Added format
      displayName:
        type: string
        nullable: true # Allow null
      photoURL:
        type: string
        format: url # Added format
        nullable: true # Allow null
      role:
        type: string
        enum: [user, admin] # Assuming admin role exists
      subscriptionStatus:
        type: string
        enum: [active, inactive, canceled, past_due, trialing] # Added more states
        nullable: true
      subscriptionPlanId:
        type: string
        description: ID of the subscription plan
        nullable: true
      billingCycleStart:
        type: string
        format: date-time
        description: Start date of the current billing cycle
        nullable: true
      billingCycleEnd:
        type: string
        format: date-time
        description: End date of the current billing cycle
        nullable: true
      caseQuotaTotal:
        type: integer
        description: Total number of cases included in the subscription for the current billing cycle
        nullable: true
      caseQuotaUsed:
        type: integer
        description: Number of cases used from the quota in the current billing cycle
        nullable: true
      stripeCustomerId:
        type: string
        description: Stripe customer ID for payment processing
        nullable: true
      stripeSubscriptionId:
        type: string
        description: Stripe subscription ID
        nullable: true
      languagePreference:
        type: string
        enum: [en, ro]
        default: en
      createdAt:
        type: string
        format: date-time
      updatedAt:
        type: string
        format: date-time

  Organization:
    type: object
    properties:
      organizationId:
        type: string
      name:
        type: string
      type:
        type: string
        description: e.g., law_firm, company, individual_professional
      address:
        type: string
        nullable: true
      phone:
        type: string
        nullable: true
      email:
        type: string
        format: email
        nullable: true
      createdAt:
        type: string
        format: date-time
      ownerId:
        type: string
        description: User ID of the organization owner
      subscriptionStatus:
        type: string
        enum: [active, inactive, canceled, past_due, trialing] # Added more states
        description: Current subscription status
        nullable: true
      subscriptionPlanId:
        type: string
        description: ID of the subscription plan
        nullable: true
      billingCycleStart:
        type: string
        format: date-time
        description: Start date of the current billing cycle
        nullable: true
      billingCycleEnd:
        type: string
        format: date-time
        description: End date of the current billing cycle
        nullable: true
      caseQuotaTotal:
        type: integer
        description: Total number of cases included in the subscription for the current billing cycle
        nullable: true
      caseQuotaUsed:
        type: integer
        description: Number of cases used from the quota in the current billing cycle
        nullable: true
      stripeCustomerId:
        type: string
        description: Stripe customer ID for payment processing
        nullable: true
      stripeSubscriptionId:
        type: string
        description: Stripe subscription ID
        nullable: true
    required: # Added required fields
      - organizationId
      - name
      - type
      - createdAt
      - ownerId

  OrganizationSummary:
    type: object
    properties:
      organizationId:
        type: string
      name:
        type: string
      type:
        type: string
      role: # User's role within this org
        type: string
        enum: [owner, administrator, staff] # Expanded roles
    required:
      - organizationId
      - name
      - type
      - role

  OrganizationMember:
    type: object
    properties:
      userId:
        type: string
      role:
        type: string
        enum: [owner, administrator, staff] # Expanded roles
      addedAt:
        type: string
        format: date-time
      email: # Denormalized for convenience
        type: string
        format: email
      displayName: # Denormalized for convenience
        type: string
        nullable: true
    required:
      - userId
      - role
      - addedAt
      - email

  MembershipResponse: # Response for add/update member ops
    type: object
    properties:
      success:
        type: boolean
      membershipId: # ID of the membership link itself
        type: string
      userId:
        type: string
      organizationId:
        type: string
      role:
        type: string
        enum: [owner, administrator, staff]
      # Include denormalized info for immediate UI update
      email:
        type: string
        format: email
      displayName:
        type: string
        nullable: true
    required:
      - success
      - membershipId
      - userId
      - organizationId
      - role
      - email

  Case:
    type: object
    properties:
      caseId:
        type: string
      title:
        type: string
      description:
        type: string
        nullable: true
      caseType: # More specific than tier? e.g., litigation, consultation
        type: string
        nullable: true
      userId: # Owner/creator user ID
        type: string
      organizationId: # Optional organization context
        type: string
        nullable: true
      status:
        type: string
        enum: [open, archived, deleted, pending_payment] # Added states
        default: open
      createdAt:
        type: string
        format: date-time
      updatedAt: # Added
        type: string
        format: date-time
      archivedAt: # Added
        type: string
        format: date-time
        nullable: true
      deletedAt: # Added
        type: string
        format: date-time
        nullable: true
      assignedUserId: # Added
        type: string
        nullable: true
      paymentStatus:
        type: string
        enum: [paid_intent, covered_by_quota, pending, not_required, refunded] # Added states
        description: Payment status of the case
        nullable: true # May not apply if free tier/quota
      paymentIntentId: # Associated payment intent if paid individually
        type: string
        nullable: true
      caseTier:
        type: integer
        enum: [1, 2, 3]
        description: Case tier level (1=Basic, 2=Standard, 3=Complex)
      casePrice:
        type: integer
        description: Price of the case in cents (at the time of creation/payment)
        nullable: true # May be covered by quota
      partyIds: # List of attached party IDs
         type: array
         items:
           type: string
         description: List of party IDs attached to this case
    required:
      - caseId
      - title
      - userId
      - status
      - createdAt
      - updatedAt
      - caseTier

  FileResponse: # Response for upload
    type: object
    properties:
      success:
        type: boolean
      fileId:
        type: string
      fileName:
        type: string
      fileUrl: # Potentially a signed URL for temporary access
        type: string
        format: url
      caseId:
        type: string
      uploadedAt:
        type: string
        format: date-time
    required:
      - success
      - fileId
      - fileName
      - fileUrl
      - caseId
      - uploadedAt

  # Standard Error Responses
  BadRequest:
    description: The request is invalid or malformed.
    type: object
    properties:
      error:
        type: string
        enum: [invalid_request, validation_error]
      message:
        type: string
        description: General error message.
      details: # Optional field for specific validation errors
        type: object
        description: Detailed validation errors (e.g., field-specific issues).
    required:
      - error
      - message

  Unauthorized:
    description: Authentication failed or is missing.
    type: object
    properties:
      error:
        type: string
        enum: [unauthorized, token_expired, invalid_token]
      message:
        type: string
        description: Authentication error message.
    required:
      - error
      - message

  Forbidden:
    description: Authenticated user lacks permission for the action.
    type: object
    properties:
      error:
        type: string
        enum: [forbidden]
      message:
        type: string
        description: Permission denied message.
    required:
      - error
      - message

  NotFound:
    description: The requested resource was not found.
    type: object
    properties:
      error:
        type: string
        enum: [not_found]
      message:
        type: string
        description: Resource not found message.
      resourceType: # Optional: type of resource not found
        type: string
      resourceId:   # Optional: ID of resource not found
        type: string
    required:
      - error
      - message

  Conflict:
    description: The request conflicts with the current state of the resource.
    type: object
    properties:
      error:
        type: string
        enum: [conflict, already_exists, state_conflict]
      message:
        type: string
        description: Resource state conflict message.
    required:
      - error
      - message

  InternalServerError:
    description: An unexpected error occurred on the server.
    type: object
    properties:
      error:
        type: string
        enum: [internal_error]
      message:
        type: string
        description: Internal server error message.
      errorId: # Optional: ID for tracking specific errors
        type: string
    required:
      - error
      - message

  PaymentRequired:
    description: Payment is required to perform this action (e.g., quota exhausted).
    type: object
    properties:
      error:
        type: string
        enum: [payment_required, quota_exceeded]
      message:
        type: string
        description: Payment required message.
      requiredAction: # Optional: Hint on what action is needed
        type: string
        enum: [upgrade_plan, purchase_case, wait_for_cycle]
    required:
      - error
      - message

  RateLimitExceeded: # Added definition
    description: Too many requests hit the API too quickly.
    type: object
    properties:
      error:
        type: string
        enum: [rate_limit_exceeded]
      message:
        type: string
        description: Rate limit exceeded message.
      retryAfter: # Optional: Suggest when to retry (seconds)
        type: integer
    required:
      - error
      - message

  # Subscription Plan (Example - might be fetched from Stripe/DB)
  Plan:
    type: object
    properties:
      planId:
        type: string
        description: Unique identifier for the plan (e.g., 'personal_monthly')
      name:
        type: string
        description: Display name of the plan (e.g., 'Personal Monthly')
      description:
        type: string
        description: Description of what the plan includes
      type:
        type: string
        enum: [personal, business]
        description: Target audience/type of plan
      interval:
        type: string
        enum: [month, year] # Stripe uses 'month', 'year'
        description: Billing interval
      price:
        type: integer
        description: Price of the plan in cents
      currency:
        type: string
        default: "eur"
        description: Currency of the plan (ISO 4217 code)
      caseQuotaTotal:
        type: integer
        description: Number of cases included in the plan per billing cycle
        nullable: true # Some plans might be usage-based
      active:
        type: boolean
        description: Whether the plan is currently available for purchase
      stripePriceId: # Link to Stripe Price object
        type: string
        description: Stripe price ID for this plan interval
      features: # Optional list of included features
        type: array
        items:
          type: string
      createdAt:
        type: string
        format: date-time
      updatedAt:
        type: string
        format: date-time
    required:
      - planId
      - name
      - type
      - interval
      - price
      - currency
      - active
      - stripePriceId
      - createdAt
      - updatedAt

  # Party Definitions (Input and Output separated for clarity)
  PartyNameDetails:
    type: object
    description: Name information depending on party type
    properties:
      firstName:
        type: string
        description: Required for individual parties
      lastName:
        type: string
        description: Required for individual parties
      companyName:
        type: string
        description: Required for organization parties
    # Required fields depend on partyType, handled by application logic/validation

  PartyIdentityCodes:
    type: object
    description: Identification codes depending on party type
    properties:
      cnp:
        type: string
        description: Romanian Personal Numeric Code (13 digits). Required for individual parties
      cui:
        type: string
        description: Romanian Fiscal Code. Required for organization parties
      regCom:
        type: string
        description: Romanian Company Registration Number (e.g., Jxx/xxx/xxxx). Required for organization parties
    # Required fields depend on partyType, handled by application logic/validation

  PartyContactInfo:
    type: object
    properties:
      address:
        type: string
        description: Required physical address for all party types
      email:
        type: string
        format: email
        description: Optional contact email
      phone:
        type: string
        description: Optional contact phone number
    required:
      - address # Address is usually mandatory

  PartySignatureData:
    type: object
    properties:
      storagePath:
        type: string
        description: Path to the signature image/data in storage
      capturedAt:
        type: string
        format: date-time
        description: When the signature was captured

  PartyInput: # Definition for creating a Party
    type: object
    required:
      - partyType
      - nameDetails
      - identityCodes
      - contactInfo
    properties:
      partyType:
        type: string
        enum: [individual, organization]
        description: Type of party (individual or organization) that determines required fields
      nameDetails:
        $ref: '#/definitions/PartyNameDetails'
      identityCodes:
        $ref: '#/definitions/PartyIdentityCodes'
      contactInfo:
        $ref: '#/definitions/PartyContactInfo'
      signatureData:
        $ref: '#/definitions/PartySignatureData'
        nullable: true

  PartyUpdateInput: # Definition for updating a Party (fields are optional)
    type: object
    properties:
      # partyType cannot be changed
      nameDetails:
        $ref: '#/definitions/PartyNameDetails'
      identityCodes:
        $ref: '#/definitions/PartyIdentityCodes'
      contactInfo:
        $ref: '#/definitions/PartyContactInfo'
      signatureData:
        $ref: '#/definitions/PartySignatureData'
        nullable: true

  Party: # Full Party object definition (output)
    type: object
    properties:
      partyId:
        type: string
        description: Unique identifier for the party
      userId: # User who created/owns this party record
        type: string
        description: Firebase user ID of the party owner
      partyType:
        type: string
        enum: [individual, organization]
      nameDetails:
        $ref: '#/definitions/PartyNameDetails'
      identityCodes:
        $ref: '#/definitions/PartyIdentityCodes'
      contactInfo:
        $ref: '#/definitions/PartyContactInfo'
      signatureData:
        $ref: '#/definitions/PartySignatureData'
        nullable: true
      createdAt:
        type: string
        format: date-time
        description: When the party was created
      updatedAt:
        type: string
        format: date-time
        description: When the party was last updated
    required:
      - partyId
      - userId
      - partyType
      - nameDetails
      - identityCodes
      - contactInfo
      - createdAt
      - updatedAt