#!/bin/bash
# Comprehensive Stripe resource management script with centralized configuration

set -e

# Get script directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
CONFIG_FILE="$SCRIPT_DIR/config.json"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output to STDERR
_print_colored_stderr() {
    local color="$1"
    local prefix="$2"
    local message="$3"
    echo -e "${color}${prefix}${NC} ${message}" >&2
}

print_status_stderr() {
    _print_colored_stderr "$GREEN" "[INFO]" "$1"
}

print_warning_stderr() {
    _print_colored_stderr "$YELLOW" "[WARNING]" "$1"
}

print_error_stderr() {
    _print_colored_stderr "$RED" "[ERROR]" "$1"
}

print_header_stderr() {
    echo -e "${BLUE}=== $1 ===${NC}" >&2
}

# Function to check if jq is available
check_jq() {
    if ! command -v jq &> /dev/null; then
        print_error_stderr "jq is required but not installed. Please install jq to use this script."
        print_status_stderr "On macOS: brew install jq"
        print_status_stderr "On Ubuntu/Debian: sudo apt-get install jq"
        exit 1
    fi
}

# Function to check if Stripe CLI is available
check_stripe_cli() {
    if ! command -v stripe &> /dev/null; then
        print_error_stderr "Stripe CLI is required but not installed or not in PATH. Please install Stripe CLI."
        print_status_stderr "Installation instructions: https://stripe.com/docs/stripe-cli"
        exit 1
    fi
}

# Function to check if config file exists
check_config() {
    if [ ! -f "$CONFIG_FILE" ]; then
        print_error_stderr "Configuration file not found: $CONFIG_FILE"
        exit 1
    fi
}

# Function to read config value
get_config() {
    local key=$1
    jq -r "$key" "$CONFIG_FILE"
}

# Function to get array from config
get_config_array() {
    local key=$1
    jq -r "$key[]" "$CONFIG_FILE"
}

# Function to get object keys
get_config_keys() {
    local key=$1
    jq -r "$key | keys[]" "$CONFIG_FILE"
}

# Function to get value from temporary file
get_temp_value() {
    local file=$1
    local key=$2
    grep "^$key=" "$file" | cut -d'=' -f2
}

# Function to show usage
show_usage() {
    echo "Usage: $0 <command> [options]" >&2
    echo "" >&2
    echo "Commands:" >&2
    echo "  create                  Create all Stripe resources (uses config.json)" >&2
    echo "  update                  Update existing Stripe resources (uses config.json)" >&2
    echo "  delete                  Delete/deactivate all Stripe resources" >&2
    echo "  list                    List all Stripe resources" >&2
    echo "  set-env                 Fetch live Stripe Price IDs and generate/save environment variable export commands to .env.stripe" >&2
    echo "  clean                   Clean up old/inactive resources" >&2
    echo "  config                  Show current configuration" >&2
    echo "  validate                Validate configuration file" >&2
    echo "" >&2
    echo "Configuration:" >&2
    echo "  Edit scripts/stripe/config.json to modify:" >&2
    echo "  - Webhook URL and events" >&2
    echo "  - Product names, descriptions, and pricing" >&2
    echo "  - Coupon and promotion code details" >&2
    echo "  - Tax rate information" >&2
    echo "" >&2
    echo "Examples:" >&2
    echo "  $0 create" >&2
    echo "  $0 update" >&2
    echo "  $0 delete" >&2
    echo "  $0 list" >&2
    echo "  $0 config" >&2
}

# Function to show current configuration
show_config() {
    print_header_stderr "Current Configuration"
    echo -e "\n${BLUE}Environment:${NC} $(get_config '.environment')" >&2
    echo -e "${BLUE}Webhook URL:${NC} $(get_config '.webhook_url')" >&2
    echo -e "\n${BLUE}Products:${NC}" >&2
    for product_key in $(get_config_keys '.products'); do
        name=$(get_config ".products.$product_key.name")
        echo "  - $product_key: $name" >&2
    done
    echo -e "\n${BLUE}Prices:${NC}" >&2
    for price_key in $(get_config_keys '.prices'); do
        nickname=$(get_config ".prices.$price_key.nickname")
        amount=$(get_config ".prices.$price_key.unit_amount")
        currency=$(get_config ".prices.$price_key.currency")
        echo "  - $price_key: $nickname ($(($amount / 100)) $currency)" >&2
    done
    echo -e "\n${BLUE}Webhook Events:${NC}" >&2
    get_config_array '.webhook_events' | while read -r event; do
        echo "  - $event" >&2
    done
}

# Function to validate configuration
validate_config() {
    print_header_stderr "Validating Configuration"
    if ! jq empty "$CONFIG_FILE" 2>/dev/null; then
        print_error_stderr "Configuration file is not valid JSON"
        return 1
    fi
    local required_fields=(".environment" ".webhook_url" ".products" ".prices")
    for field in "${required_fields[@]}"; do
        if [ "$(get_config "$field")" = "null" ]; then
            print_error_stderr "Required field missing: $field"
            return 1
        fi
    done
    print_status_stderr "Configuration is valid"
}

# Function to get TF_VAR name from lookup key
get_tf_var_name() {
    case "$1" in
        "relex_price_case_tier1_onetime") echo "TF_VAR_stripe_price_id_case_tier1" ;;
        "relex_price_case_tier2_onetime") echo "TF_VAR_stripe_price_id_case_tier2" ;;
        "relex_price_case_tier3_onetime") echo "TF_VAR_stripe_price_id_case_tier3" ;;
        "relex_price_individual_monthly") echo "TF_VAR_stripe_price_id_individual_monthly" ;;
        "relex_price_individual_yearly") echo "TF_VAR_stripe_price_id_individual_yearly" ;;
        "relex_price_org_basic_monthly") echo "TF_VAR_stripe_price_id_org_basic_monthly" ;;
        "relex_price_org_basic_yearly") echo "TF_VAR_stripe_price_id_org_basic_yearly" ;;
        "relex_price_org_pro_monthly") echo "TF_VAR_stripe_price_id_org_pro_monthly" ;;
        "relex_price_org_pro_yearly") echo "TF_VAR_stripe_price_id_org_pro_yearly" ;;
        *) echo "" ;;
    esac
}

# Function to set Stripe environment variables from live Price IDs
set_env_vars() {
    print_header_stderr "Set Stripe Environment Variables"
    if [ -z "$STRIPE_SECRET_KEY" ]; then
        print_error_stderr "STRIPE_SECRET_KEY environment variable is not set. Cannot fetch live Price IDs."
        print_error_stderr "Please set it: export STRIPE_SECRET_KEY=sk_test_yourkey"
        return 1
    fi

    print_status_stderr "Generating export commands (to stdout)..."
    for price_config_key in $(jq -r '.prices | keys[]' "$CONFIG_FILE"); do
        actual_lookup_key_val=$(jq -r ".prices.\"$price_config_key\".lookup_key // \"\"" "$CONFIG_FILE")
        if [ -z "$actual_lookup_key_val" ]; then
            print_warning_stderr "Config entry .prices.$price_config_key does not have a 'lookup_key' or it is empty. Skipping."
            continue
        fi

        local env_var_name=$(get_tf_var_name "$actual_lookup_key_val")
        if [ -z "$env_var_name" ]; then
            print_warning_stderr "Lookup key '$actual_lookup_key_val' from config.json (.prices.$price_config_key) is not mapped to a TF_VAR in set_env_vars. Skipping."
            continue
        fi

        print_status_stderr "Fetching Stripe Price ID for lookup_key: '$actual_lookup_key_val' (for $env_var_name)"
        
        local price_list_output stripe_price_id=""
        local cli_exit_code
        local stderr_capture_file_prices; stderr_capture_file_prices=$(mktemp)
        
        set +e
        # Get ALL prices with this lookup key, not just active ones
        price_list_output=$(stripe prices list --lookup-keys "$actual_lookup_key_val" --limit 10 --api-key "$STRIPE_SECRET_KEY" 2> "$stderr_capture_file_prices")
        cli_exit_code=$?
        set -e

        if [ $cli_exit_code -ne 0 ]; then
            print_warning_stderr "Stripe CLI command failed (exit code $cli_exit_code) for lookup_key '$actual_lookup_key_val'. TF_VAR '$env_var_name' will not be set."
            if [ -s "$stderr_capture_file_prices" ]; then
                print_warning_stderr "Stripe CLI stderr: $(cat "$stderr_capture_file_prices")"
            fi
        else
            if echo "$price_list_output" | jq empty >/dev/null 2>&1; then
                # Find the first active price with this lookup key
                stripe_price_id=$(echo "$price_list_output" | jq -r '.data[] | select(.active==true) | .id' | head -n 1)
                if [ -z "$stripe_price_id" ]; then
                    # If no active price, show info about inactive ones
                    local inactive_count=$(echo "$price_list_output" | jq -r '.data | length')
                    if [ "$inactive_count" -gt 0 ]; then
                        print_warning_stderr "Found $inactive_count inactive price(s) for lookup_key '$actual_lookup_key_val'"
                    else
                        print_warning_stderr "No prices found for lookup_key '$actual_lookup_key_val'"
                    fi
                fi
            else
                print_warning_stderr "Stripe CLI output for lookup_key '$actual_lookup_key_val' was not valid JSON. Output: $price_list_output"
            fi
        fi
        rm -f "$stderr_capture_file_prices"
        
        # Always output the export command to stdout, even if empty
        if [ -z "$stripe_price_id" ]; then
            print_warning_stderr "TF_VAR '$env_var_name' will be set to empty."
        else
            print_status_stderr "Found active Stripe Price ID: $stripe_price_id. Setting $env_var_name."
        fi
        # Output the export command to stdout (not stderr)
        echo "export $env_var_name=\"$stripe_price_id\""
    done
    print_status_stderr "Finished generating environment variable export commands."
}

# Function to create all resources from config
create_resources() {
    print_header_stderr "Creating Stripe Resources from Configuration"
    if [ -z "$STRIPE_SECRET_KEY" ]; then
        print_error_stderr "STRIPE_SECRET_KEY environment variable is not set. Cannot manage Stripe resources."
        exit 1
    fi

    # First, try to use existing resources if they have the correct lookup keys
    print_status_stderr "Checking for existing resources with correct lookup keys..."
    local has_all_prices=true
    for price_key in $(get_config_keys '.prices'); do
        lookup_key=$(get_config ".prices.$price_key.lookup_key")
        if [ -n "$lookup_key" ]; then
            local existing_price=$(stripe prices list --lookup-keys "$lookup_key" --active true --limit 1 --api-key "$STRIPE_SECRET_KEY" 2>/dev/null | jq -r '.data[0].id // empty')
            if [ -z "$existing_price" ]; then
                has_all_prices=false
                break
            fi
        fi
    done

    if [ "$has_all_prices" = "true" ]; then
        print_status_stderr "All required prices already exist with correct lookup keys. Skipping resource creation."
        return 0
    fi

    local webhook_url=$(get_config '.webhook_url')
    local environment=$(get_config '.environment')
    print_status_stderr "Environment: $environment"
    print_status_stderr "Webhook URL: $webhook_url"
    PRODUCT_IDS_FILE=$(mktemp)
    PRICE_IDS_FILE=$(mktemp)
    COUPON_IDS_FILE=$(mktemp)
    local temp_stderr_file; temp_stderr_file=$(mktemp)

    print_status_stderr "Creating/Verifying products..."
    for product_key in $(get_config_keys '.products'); do
        name=$(get_config ".products.$product_key.name")
        description=$(get_config ".products.$product_key.description")
        statement_descriptor=$(get_config ".products.$product_key.statement_descriptor")
        config_active_status=$(get_config ".products.$product_key.active")
        print_status_stderr "Checking product: $name"
        local stripe_cli_output stripe_exit_code existing_product_id PRODUCT_ID_current
        
        # List all products and find exact match
        set +e
        stripe_cli_output=$(stripe products list --limit 100 --api-key "$STRIPE_SECRET_KEY" 2> "$temp_stderr_file")
        stripe_exit_code=$?
        set -e
        
        if [ $stripe_exit_code -ne 0 ]; then
            print_error_stderr "Stripe CLI command failed (exit code: $stripe_exit_code) while listing products."
            [ -s "$temp_stderr_file" ] && print_error_stderr "Stripe CLI stderr: $(cat "$temp_stderr_file")" >&2
            exit 1
        fi
        
        if ! echo "$stripe_cli_output" | jq empty 2>/dev/null; then
            print_error_stderr "Stripe CLI output was not valid JSON (listing products). Output: $stripe_cli_output"
            exit 1
        fi
        
        # Find active product with exact name match
        existing_product_id=$(echo "$stripe_cli_output" | jq -r --arg name "$name" '.data[] | select(.name==$name and .active==true) | .id' | head -n 1)
        
        if [ -n "$existing_product_id" ]; then
            print_status_stderr "Product '$name' already exists and is active with ID: $existing_product_id. Using existing product."
            PRODUCT_ID_current="$existing_product_id"
            echo "$product_key=$PRODUCT_ID_current" >> "$PRODUCT_IDS_FILE"
        else
            print_status_stderr "Product '$name' not found or not active. Creating..."
            print_status_stderr "Attempting to create product with Name: '$name', Desc: '$description', StmtDesc: '$statement_descriptor', Active: '$config_active_status'"
            set +e
            stripe_cli_output=$(stripe products create --name="$name" --description="$description" --statement-descriptor="$statement_descriptor" --active="$config_active_status" --api-key "$STRIPE_SECRET_KEY" 2> "$temp_stderr_file")
            stripe_exit_code=$?
            set -e
            if [ $stripe_exit_code -ne 0 ]; then
                print_error_stderr "Stripe CLI command failed (exit code: $stripe_exit_code) while creating product '$name'."
                [ -s "$temp_stderr_file" ] && print_error_stderr "Stripe CLI stderr: $(cat "$temp_stderr_file")" >&2
                exit 1
            fi
            if ! echo "$stripe_cli_output" | jq empty 2>/dev/null; then
                print_error_stderr "Stripe CLI output was not valid JSON (creating product '$name'). Output: $stripe_cli_output"
                exit 1
            fi
            PRODUCT_ID_current=$(echo "$stripe_cli_output" | jq -r '.id // empty')
            if [ -n "$PRODUCT_ID_current" ]; then
                echo "$product_key=$PRODUCT_ID_current" >> "$PRODUCT_IDS_FILE"
                print_status_stderr "Created product '$name' ($product_key): $PRODUCT_ID_current"
            else
                print_error_stderr "Failed to create product '$name' or extract ID. Response: $stripe_cli_output"
            fi
        fi
    done

    print_status_stderr "Creating/Verifying prices..."
    for price_key in $(get_config_keys '.prices'); do
        product_ref_key=$(get_config ".prices.$price_key.product")
        currency=$(get_config ".prices.$price_key.currency")
        unit_amount=$(get_config ".prices.$price_key.unit_amount")
        nickname=$(get_config ".prices.$price_key.nickname")
        lookup_key=$(get_config ".prices.$price_key.lookup_key")
        price_type=$(get_config ".prices.$price_key.type")
        if [ -z "$lookup_key" ]; then
            print_warning_stderr "Price config '$price_key' is missing 'lookup_key'. Skipping."
            continue
        fi
        local PRODUCT_ID_for_price
        PRODUCT_ID_for_price=$(get_temp_value "$PRODUCT_IDS_FILE" "$product_ref_key")
        if [ -z "$PRODUCT_ID_for_price" ]; then
            print_error_stderr "Could not find Product ID for product reference '$product_ref_key' (for price '$nickname'). Ensure product was created or found. Skipping this price."
            continue
        fi
        print_status_stderr "Checking for existing price with lookup_key '$lookup_key'..."
        local price_json_data price_id_from_list is_price_active price_product_id_from_list PRICE_ID_current
        set +e
        stripe_cli_output=$(stripe prices list --lookup-keys="$lookup_key" --limit 10 --api-key "$STRIPE_SECRET_KEY" 2> "$temp_stderr_file")
        stripe_exit_code=$?
        set -e
        if [ $stripe_exit_code -ne 0 ]; then
            print_error_stderr "Stripe CLI command failed (code: $stripe_exit_code) listing prices for lookup_key '$lookup_key'."
            [ -s "$temp_stderr_file" ] && print_error_stderr "Stripe stderr: $(cat "$temp_stderr_file")" >&2
            continue 
        fi
        if ! echo "$stripe_cli_output" | jq empty 2>/dev/null; then
            print_error_stderr "Stripe CLI output not JSON (listing prices for '$lookup_key'). Output: $stripe_cli_output"
            continue 
        fi
        
        # Check if any active price exists with this lookup key
        local active_price_id=$(echo "$stripe_cli_output" | jq -r '.data[] | select(.active==true) | .id' | head -n 1)
        if [ -n "$active_price_id" ]; then
            print_status_stderr "Active price already exists with lookup_key '$lookup_key' (ID: $active_price_id). Using existing price."
            PRICE_ID_current="$active_price_id"
            echo "$price_key=$PRICE_ID_current" >> "$PRICE_IDS_FILE"
            continue
        fi
        
        print_status_stderr "Creating new price for lookup_key '$lookup_key' on product $PRODUCT_ID_for_price..."
        local create_params
        create_params=(
            --product "$PRODUCT_ID_for_price" --currency "$currency" --unit-amount "$unit_amount"
            --nickname "$nickname" --lookup-key "$lookup_key" --tax-behavior "inclusive"
            --api-key "$STRIPE_SECRET_KEY"
        )
        if [ "$price_type" = "recurring" ]; then
            recurring_interval=$(get_config ".prices.$price_key.recurring_interval")
            create_params+=(--recurring.interval "$recurring_interval")
        fi
        set +e
        stripe_cli_output=$(stripe prices create "${create_params[@]}" 2> "$temp_stderr_file")
        stripe_exit_code=$?
        set -e
        if [ $stripe_exit_code -ne 0 ]; then
            print_error_stderr "Stripe CLI failed (code: $stripe_exit_code) creating price '$nickname' (lk: $lookup_key)."
            [ -s "$temp_stderr_file" ] && print_error_stderr "Stripe stderr: $(cat "$temp_stderr_file")" >&2
            continue 
        fi
        if ! echo "$stripe_cli_output" | jq empty 2>/dev/null; then
            print_error_stderr "Stripe CLI output not JSON (creating price '$nickname'). Output: $stripe_cli_output"
            continue
        fi
        PRICE_ID_current=$(echo "$stripe_cli_output" | jq -r '.id // empty')
        if [ -n "$PRICE_ID_current" ]; then
            echo "$price_key=$PRICE_ID_current" >> "$PRICE_IDS_FILE"
            print_status_stderr "Created price '$nickname' ($price_key) with lk '$lookup_key': $PRICE_ID_current"
        else
            print_error_stderr "Failed to create price '$nickname' (lk: $lookup_key) or extract ID. Response: $stripe_cli_output"
        fi
    done
    
    print_status_stderr "Creating/Verifying coupons..."
    for coupon_key in $(get_config_keys '.coupons'); do
        name=$(get_config ".coupons.$coupon_key.name")
        percent_off=$(get_config ".coupons.$coupon_key.percent_off")
        duration=$(get_config ".coupons.$coupon_key.duration")
        local COUPON_ID_current
        
        print_status_stderr "Checking if coupon '$name' exists..."
        
        # Try to retrieve the coupon by ID first (using the key as ID)
        local existing_coupon_check
        set +e
        existing_coupon_check=$(stripe coupons retrieve "$coupon_key" --api-key "$STRIPE_SECRET_KEY" 2> "$temp_stderr_file")
        local retrieve_exit_code=$?
        set -e
        
        if [ $retrieve_exit_code -eq 0 ] && echo "$existing_coupon_check" | jq empty 2>/dev/null; then
            # Coupon exists
            local existing_valid=$(echo "$existing_coupon_check" | jq -r '.valid // false')
            if [ "$existing_valid" = "true" ]; then
                print_status_stderr "Coupon '$coupon_key' already exists and is valid. Skipping creation."
                COUPON_ID_current="$coupon_key"
                echo "$coupon_key=$COUPON_ID_current" >> "$COUPON_IDS_FILE"
                continue
            else
                print_warning_stderr "Coupon '$coupon_key' exists but is not valid. Creating with timestamp suffix."
                coupon_key="${coupon_key}_$(date +%s)"
            fi
        fi
        
        # Create coupon with explicit ID
        print_status_stderr "Creating coupon: $name (ID: $coupon_key)"
        local coupon_create_output cli_exit_code_create_coupon
        set +e
        coupon_create_output=$(stripe coupons create --id="$coupon_key" --name="$name" --duration="$duration" --percent-off="$percent_off" --api-key "$STRIPE_SECRET_KEY" 2> "$temp_stderr_file")
        cli_exit_code_create_coupon=$?
        set -e
        
        if [ $cli_exit_code_create_coupon -eq 0 ]; then
            if echo "$coupon_create_output" | jq empty 2>/dev/null; then
                COUPON_ID_current=$(echo "$coupon_create_output" | jq -r '.id // empty')
                if [ -n "$COUPON_ID_current" ]; then
                    echo "$coupon_key=$COUPON_ID_current" >> "$COUPON_IDS_FILE"
                    print_status_stderr "Created coupon '$name' ($coupon_key): $COUPON_ID_current"
                else
                    print_error_stderr "Failed to extract coupon ID from response"
                fi
            else
                print_error_stderr "Stripe CLI output not valid JSON for coupon creation"
            fi
        else
            # Check if error is because coupon already exists
            local error_message=$(cat "$temp_stderr_file" 2>/dev/null || echo 'Unknown error')
            print_error_stderr "Failed to create coupon '$name'. CLI exit code: $cli_exit_code_create_coupon"
            print_error_stderr "Error details: $error_message"
            continue
        fi
    done

    print_status_stderr "Creating/Verifying promotion codes..."
    for promo_key in $(get_config_keys '.promotion_codes'); do
        coupon_ref_key=$(get_config ".promotion_codes.$promo_key.coupon") 
        code=$(get_config ".promotion_codes.$promo_key.code") 
        active=$(get_config ".promotion_codes.$promo_key.active")
        local unique_code="$code" 
        local PROMO_ID_current 
        COUPON_ID_for_promo=$(get_temp_value "$COUPON_IDS_FILE" "$coupon_ref_key") 
        if [ -z "$COUPON_ID_for_promo" ]; then
            print_warning_stderr "Coupon ID for '$coupon_ref_key' not found. Trying to use the key directly."
            COUPON_ID_for_promo="$coupon_ref_key"
        fi
        print_status_stderr "Checking if promotion code '$unique_code' already exists..."
        local existing_promo_id cli_exit_code_list_promo
        set +e
        existing_promo_id=$(stripe promotion_codes list --code "$unique_code" --active=true --limit=1 --api-key "$STRIPE_SECRET_KEY" 2> "$temp_stderr_file" | jq -r '.data[0].id // empty')
        cli_exit_code_list_promo=$?
        set -e
        if [ $cli_exit_code_list_promo -ne 0 ]; then
            print_warning_stderr "Stripe CLI failed listing promotion codes for '$unique_code'. Assuming it doesn't exist."
            [ -s "$temp_stderr_file" ] && print_warning_stderr "Stripe stderr: $(cat "$temp_stderr_file")" >&2
            existing_promo_id=""
        fi
        if [ -n "$existing_promo_id" ]; then
            print_status_stderr "Promotion code '$unique_code' already exists with ID: $existing_promo_id. Skipping creation."
        else
            print_status_stderr "Creating promotion code: $unique_code for coupon $COUPON_ID_for_promo"
            local promo_create_output cli_exit_code_create_promo
            set +e
            promo_create_output=$(stripe promotion_codes create --coupon="$COUPON_ID_for_promo" --code="$unique_code" --active="$active" --api-key "$STRIPE_SECRET_KEY" 2> "$temp_stderr_file")
            cli_exit_code_create_promo=$?
            set -e
            if [ $cli_exit_code_create_promo -ne 0 ]; then
                print_error_stderr "Failed to create promotion code '$unique_code'. CLI exit code: $cli_exit_code_create_promo"
                [ -s "$temp_stderr_file" ] && print_error_stderr "Stripe stderr: $(cat "$temp_stderr_file")" >&2
                continue
            fi
            if ! echo "$promo_create_output" | jq empty 2>/dev/null; then
                print_error_stderr "Stripe CLI output not JSON (creating promo code '$unique_code'). Output: $promo_create_output"
                continue
            fi
            PROMO_ID_current=$(echo "$promo_create_output" | jq -r '.id // empty')
            if [ -n "$PROMO_ID_current" ]; then
                print_status_stderr "Created promotion code '$unique_code' ($promo_key): $PROMO_ID_current"
            else
                print_error_stderr "Failed to create promotion code '$unique_code' or extract ID. Response: $promo_create_output"
            fi
        fi
    done

    print_status_stderr "Creating/Verifying tax rates..."
    for tax_key in $(get_config_keys '.tax_rates'); do
        display_name=$(get_config ".tax_rates.$tax_key.display_name")
        description=$(get_config ".tax_rates.$tax_key.description")
        jurisdiction=$(get_config ".tax_rates.$tax_key.jurisdiction")
        percentage=$(get_config ".tax_rates.$tax_key.percentage") 
        inclusive=$(get_config ".tax_rates.$tax_key.inclusive") 
        active=$(get_config ".tax_rates.$tax_key.active") 
        local TAX_ID_current 
        
        print_status_stderr "Checking for existing tax rate '$display_name' ($percentage% for $jurisdiction)..."
        local tax_list_output cli_exit_code_list_tax existing_tax_id=""
        set +e
        tax_list_output=$(stripe tax_rates list --active=true --limit=100 --api-key "$STRIPE_SECRET_KEY" 2> "$temp_stderr_file")
        cli_exit_code_list_tax=$?
        set -e

        if [ $cli_exit_code_list_tax -ne 0 ]; then
            print_warning_stderr "Stripe CLI command failed (exit code $cli_exit_code_list_tax) while listing tax rates."
            [ -s "$temp_stderr_file" ] && print_warning_stderr "Stripe CLI stderr: $(cat "$temp_stderr_file")" >&2
        elif ! echo "$tax_list_output" | jq empty 2>/dev/null; then
             print_warning_stderr "Stripe CLI output for 'tax_rates list' was not valid JSON. Output: $tax_list_output"
        else
            local percentage_val=${percentage:-0}
            local inclusive_val_str=$( [ "$inclusive" == "true" ] && echo "true" || echo "false" )
            existing_tax_id=$(echo "$tax_list_output" | jq -r \
                --arg dn "$display_name" \
                --argjson p "$percentage_val" \
                --arg j "$jurisdiction" \
                --argjson incl "$inclusive_val_str" \
                '.data[] | select(.display_name==$dn and .percentage==$p and .jurisdiction==$j and .inclusive==$incl and .active==true).id // empty' | head -n 1)
        fi

        if [ -n "$existing_tax_id" ]; then
            print_status_stderr "Active tax rate '$display_name' already exists with ID: $existing_tax_id. Skipping creation."
        else
            print_status_stderr "Creating tax rate: $display_name"
            local tax_create_output cli_exit_code_create_tax
            set +e
            tax_create_output=$(stripe tax_rates create --display-name="$display_name" --description="$description" --jurisdiction="$jurisdiction" --percentage="$percentage" --inclusive="$inclusive" --active="$active" --api-key "$STRIPE_SECRET_KEY" 2> "$temp_stderr_file")
            cli_exit_code_create_tax=$?
            set -e
            
            if [ $cli_exit_code_create_tax -ne 0 ]; then
                print_error_stderr "Failed to create tax rate '$display_name'. CLI exit code: $cli_exit_code_create_tax."
                if [ -s "$temp_stderr_file" ]; then
                    local tax_error_message=$(cat "$temp_stderr_file")
                    print_error_stderr "Stripe CLI error: $tax_error_message"
                fi
                continue
            fi
            
            if ! echo "$tax_create_output" | jq empty 2>/dev/null; then
                print_error_stderr "Stripe CLI output not JSON (creating tax rate '$display_name'). Output: $tax_create_output"
                continue
            fi
            
            TAX_ID_current=$(echo "$tax_create_output" | jq -r '.id // empty')
            if [ -n "$TAX_ID_current" ]; then
                print_status_stderr "Created tax rate '$display_name' ($tax_key): $TAX_ID_current"
            else
                print_error_stderr "Failed to extract tax rate ID from Stripe response"
            fi
        fi
    done

    print_status_stderr "Creating/Verifying webhook endpoint..."
    local webhook_events_cli_params="" 
    for event in $(get_config_array '.webhook_events'); do
        webhook_events_cli_params="$webhook_events_cli_params --enabled-events=$event"
    done
    local WEBHOOK_ID_current WEBHOOK_SECRET_current 
    local project_id_for_secrets
    print_status_stderr "Checking if webhook endpoint for URL '$webhook_url' already exists..."
    local existing_webhook_id cli_exit_code_list_webhook webhook_list_output
    set +e
    webhook_list_output=$(stripe webhook_endpoints list --limit=100 --api-key "$STRIPE_SECRET_KEY" 2> "$temp_stderr_file")
    cli_exit_code_list_webhook=$?
    set -e
    existing_webhook_id=""
    if [ $cli_exit_code_list_webhook -ne 0 ]; then
        print_warning_stderr "Stripe CLI failed listing webhooks for URL '$webhook_url'. Assuming it doesn't exist."
        [ -s "$temp_stderr_file" ] && print_warning_stderr "Stripe stderr: $(cat "$temp_stderr_file")" >&2
    elif ! echo "$webhook_list_output" | jq empty 2>/dev/null; then
        print_warning_stderr "Stripe CLI output for 'webhook_endpoints list' was not valid JSON. Output: $webhook_list_output"
        [ -s "$temp_stderr_file" ] && print_warning_stderr "Stripe stderr (though exit code was 0): $(cat "$temp_stderr_file")" >&2
    else
        existing_webhook_id=$(echo "$webhook_list_output" | jq -r --arg url_filter "$webhook_url" '.data[] | select(.url==$url_filter and .status=="enabled").id // empty' | head -n 1)
    fi
    if [ -n "$existing_webhook_id" ]; then
        print_status_stderr "Webhook endpoint for URL '$webhook_url' already exists with ID: $existing_webhook_id. Skipping creation."
        print_warning_stderr "The existing webhook secret in Google Secret Manager will be assumed to be valid. If events need updating, do it manually or enhance script."
    else
        print_status_stderr "Creating new webhook endpoint for URL '$webhook_url'..."
        local WEBHOOK_RESULT cli_exit_code_create_webhook
        set +e
        WEBHOOK_RESULT=$(stripe webhook_endpoints create --url="$webhook_url" $webhook_events_cli_params --description="Relex Application Webhook ($environment)" --api-key "$STRIPE_SECRET_KEY" 2> "$temp_stderr_file")
        cli_exit_code_create_webhook=$?
        set -e
        if [ $cli_exit_code_create_webhook -ne 0 ]; then
            print_error_stderr "Failed to create webhook endpoint for URL '$webhook_url'. CLI exit code: $cli_exit_code_create_webhook"
            [ -s "$temp_stderr_file" ] && print_error_stderr "Stripe stderr: $(cat "$temp_stderr_file")" >&2
        elif ! echo "$WEBHOOK_RESULT" | jq empty 2>/dev/null; then
            print_error_stderr "Stripe CLI output not JSON (creating webhook for '$webhook_url'). Output: $WEBHOOK_RESULT"
        else
            WEBHOOK_ID_current=$(echo "$WEBHOOK_RESULT" | jq -r '.id // empty')
            WEBHOOK_SECRET_current=$(echo "$WEBHOOK_RESULT" | jq -r '.secret // empty')
            if [ -z "$WEBHOOK_ID_current" ] || [ -z "$WEBHOOK_SECRET_current" ]; then
                print_error_stderr "Failed to create webhook or extract ID/Secret. Output: $WEBHOOK_RESULT"
            else
                print_status_stderr "Created Webhook Endpoint: $WEBHOOK_ID_current"
                project_id_for_secrets=$(gcloud config get-value project 2>/dev/null)
                if [ -z "$project_id_for_secrets" ]; then
                    print_error_stderr "Could not determine Google Cloud Project ID using 'gcloud config get-value project'. Cannot store webhook secret."
                else
                    print_status_stderr "Storing webhook secret in Secret Manager for project '$project_id_for_secrets'..."
                    set +e
                    echo -n "$WEBHOOK_SECRET_current" | gcloud secrets versions add stripe-webhook-secret --data-file=- --project="$project_id_for_secrets"
                    gcloud_exit_code=$?
                    set -e
                    if [ $gcloud_exit_code -ne 0 ]; then
                        print_error_stderr "Failed to store webhook secret in Secret Manager. gcloud exit code: $gcloud_exit_code. Manual storage required."
                    else
                        print_status_stderr "Webhook secret stored successfully."
                    fi
                fi
            fi
        fi
    fi
    rm -f "$temp_stderr_file"
    print_header_stderr "Resource Creation/Verification Complete"
    print_status_stderr "All Stripe resources have been processed."
    rm -f "$PRODUCT_IDS_FILE" "$PRICE_IDS_FILE" "$COUPON_IDS_FILE"
}

delete_resources() {
    print_header_stderr "Deleting/Deactivating Stripe Resources"
    print_warning_stderr "This will deactivate/delete ALL Stripe resources defined in this script's logic or found by general list commands. Continue? (y/N)" 
    read -r response 
    if [[ ! "$response" =~ ^([yY][eE][sS]|[yY])$ ]]; then
        print_status_stderr "Operation cancelled."
        return
    fi
    print_status_stderr "Deleting webhook endpoints (matching config URL if possible, else all)..."
    local webhook_url_from_config=$(get_config '.webhook_url')
    stripe webhook_endpoints list --limit=100 --api-key "$STRIPE_SECRET_KEY" | jq -r ".data[] | select(.url==\"$webhook_url_from_config\").id // empty" | while read -r ID; do
      if [ -n "$ID" ]; then
        print_status_stderr "Deleting webhook endpoint: $ID (URL: $webhook_url_from_config)"; stripe webhook_endpoints delete "$ID" --api-key "$STRIPE_SECRET_KEY" || print_warning_stderr "Failed to delete webhook $ID";
      fi
    done
    print_status_stderr "Deactivating promotion codes (matching config codes if possible)..."
    for promo_key in $(get_config_keys '.promotion_codes'); do
        local code_to_deactivate=$(get_config ".promotion_codes.$promo_key.code")
        stripe promotion_codes list --code "$code_to_deactivate" --limit=10 --api-key "$STRIPE_SECRET_KEY" | jq -r '.data[].id // empty' | while read -r ID; do
            if [ -n "$ID" ]; then
                print_status_stderr "Deactivating promotion code: $ID (Code: $code_to_deactivate)"; stripe promotion_codes update "$ID" --active=false --api-key "$STRIPE_SECRET_KEY" || print_warning_stderr "Failed to deactivate promo $ID";
            fi
        done
    done
    print_status_stderr "Deleting coupons (matching config names if possible)..."
    for coupon_key_to_delete in $(get_config_keys '.coupons'); do
        local name_to_delete=$(get_config ".coupons.$coupon_key_to_delete.name")
        stripe coupons list --limit=100 --api-key "$STRIPE_SECRET_KEY" | jq -r ".data[] | select(.name==\"$name_to_delete\").id // empty" | while read -r ID; do
            if [ -n "$ID" ]; then
                print_status_stderr "Deleting coupon: $ID (Name: $name_to_delete)"; stripe coupons delete "$ID" --api-key "$STRIPE_SECRET_KEY" || print_warning_stderr "Failed to delete coupon $ID";
            fi
        done
    done
    print_status_stderr "Deactivating prices (matching config lookup_keys if possible)..."
    for price_key_to_deactivate in $(get_config_keys '.prices'); do
        local lk_to_deactivate=$(get_config ".prices.$price_key_to_deactivate.lookup_key")
        if [ -n "$lk_to_deactivate" ]; then
            stripe prices list --lookup-keys="$lk_to_deactivate" --limit=10 --api-key "$STRIPE_SECRET_KEY" | jq -r '.data[].id // empty' | while read -r ID; do
                if [ -n "$ID" ]; then
                    print_status_stderr "Deactivating price: $ID (LK: $lk_to_deactivate)"; stripe prices update "$ID" --active=false --api-key "$STRIPE_SECRET_KEY" || print_warning_stderr "Failed to deactivate price $ID";
                fi
            done
        fi
    done
    print_status_stderr "Deactivating products (matching config names if possible)..."
     for prod_key_to_deactivate in $(get_config_keys '.products'); do
        local name_to_deactivate=$(get_config ".products.$prod_key_to_deactivate.name")
        stripe products list --limit=100 --api-key "$STRIPE_SECRET_KEY" | jq -r ".data[] | select(.name==\"$name_to_deactivate\").id // empty" | while read -r ID; do
            if [ -n "$ID" ]; then
                print_status_stderr "Deactivating product: $ID (Name: $name_to_deactivate)"; stripe products update "$ID" --active=false --api-key "$STRIPE_SECRET_KEY" || print_warning_stderr "Failed to deactivate product $ID";
            fi
        done
    done
    print_status_stderr "Deactivating tax rates (matching config display_names if possible)..."
    for tax_key_to_deactivate in $(get_config_keys '.tax_rates'); do
        local display_name_to_deactivate=$(get_config ".tax_rates.$tax_key_to_deactivate.display_name")
        stripe tax_rates list --limit=100 --api-key "$STRIPE_SECRET_KEY" | jq -r ".data[] | select(.display_name==\"$display_name_to_deactivate\").id // empty" | while read -r ID; do
            if [ -n "$ID" ]; then
                print_status_stderr "Deactivating tax rate: $ID (Display Name: $display_name_to_deactivate)"; stripe tax_rates update "$ID" --active=false --api-key "$STRIPE_SECRET_KEY" || print_warning_stderr "Failed to deactivate tax rate $ID";
            fi
        done
    done
    print_header_stderr "Resource Deletion/Deactivation Attempt Complete"
}

list_resources() {
    print_header_stderr "Stripe Resources (Limited View)" 
    echo -e "\n${BLUE}Products (first 20):${NC}" >&2; stripe products list --limit=20 --api-key "$STRIPE_SECRET_KEY" >&2
    echo -e "\n${BLUE}Prices (first 50):${NC}" >&2; stripe prices list --limit=50 --api-key "$STRIPE_SECRET_KEY" >&2
    echo -e "\n${BLUE}Webhook Endpoints (first 10, matching config URL if possible):${NC}" >&2
    local webhook_url_from_config_list=$(get_config '.webhook_url')
    stripe webhook_endpoints list --limit=100 --api-key "$STRIPE_SECRET_KEY" | jq -c ".data[] | select(.url==\"$webhook_url_from_config_list\")" >&2 || stripe webhook_endpoints list --limit=10 --api-key "$STRIPE_SECRET_KEY" >&2
    echo -e "\n${BLUE}Coupons (first 10):${NC}" >&2; stripe coupons list --limit=10 --api-key "$STRIPE_SECRET_KEY" >&2
    echo -e "\n${BLUE}Promotion Codes (first 10):${NC}" >&2; stripe promotion_codes list --limit=10 --api-key "$STRIPE_SECRET_KEY" >&2
    echo -e "\n${BLUE}Tax Rates (first 10):${NC}" >&2; stripe tax_rates list --limit=10 --api-key "$STRIPE_SECRET_KEY" >&2
}

# Main script logic
check_jq
check_stripe_cli
check_config
case "$1" in
    create) validate_config && create_resources ;;
    update) validate_config && print_warning_stderr "Update functionality is not fully implemented. It currently re-runs create which is idempotent." && create_resources ;; 
    delete) delete_resources ;;
    list) list_resources ;;
    clean) print_warning_stderr "Clean functionality currently calls delete_resources. Ensure this is the desired behavior." && delete_resources ;; 
    config) show_config ;;
    validate) validate_config ;;
    set-env) set_env_vars ;;
    *) show_usage; exit 1 ;;
esac