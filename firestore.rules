rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isOrgMember(orgId) {
      return isAuthenticated() && exists(/databases/$(database)/documents/organization_members/$(orgId)_$(request.auth.uid));
    }

    function isOrgAdmin(orgId) {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/organization_members/$(orgId)_$(request.auth.uid)) &&
        get(/databases/$(database)/documents/organization_members/$(orgId)_$(request.auth.uid)).data.role == 'admin';
    }

    function canAccessCase(caseData) {
      // Individual case - only the case owner can access
      return (caseData.organizationId == null && request.auth.uid == caseData.userId) ||
        // Organization case - any member of that organization can access
        (caseData.organizationId != null && isOrgMember(caseData.organizationId));
    }

    function canModifyCase(caseData) {
      // Individual case - only the case owner can modify
      return (caseData.organizationId == null && request.auth.uid == caseData.userId) ||
        // Organization case - only admins of that organization can modify
        (caseData.organizationId != null && isOrgAdmin(caseData.organizationId));
    }

    function getAllowedUserFields() {
      return ['displayName', 'languagePreference', 'email', 'photoURL'];
    }

    function modifiesOnlyAllowedFields(allowedFields) {
      let affectedKeys = request.resource.data.diff(resource.data).affectedKeys();
      return affectedKeys.hasOnly(allowedFields);
    }

    // Users collection
    match /users/{userId} {
      allow read: if isUser(userId);
      allow update: if isUser(userId) && modifiesOnlyAllowedFields(getAllowedUserFields());

      // Disallow direct updates to sensitive fields
      // These should only be updated by backend functions through Admin SDK
      allow update: if isUser(userId) && 
        !(request.resource.data.diff(resource.data).affectedKeys()
          .hasAny(['role', 'stripeCustomerId', 'stripeSubscriptionId', 
                  'subscriptionStatus', 'subscriptionPlanId', 'caseQuotaTotal', 
                  'caseQuotaUsed', 'billingCycleStart', 'billingCycleEnd']));
    }

    // Organizations collection
    match /organizations/{orgId} {
      allow read: if isOrgMember(orgId);
      
      // Admins can update non-sensitive fields
      allow update: if isOrgAdmin(orgId) && 
        !(request.resource.data.diff(resource.data).affectedKeys()
          .hasAny(['stripeCustomerId', 'stripeSubscriptionId', 
                  'subscriptionStatus', 'subscriptionPlanId', 'caseQuotaTotal', 
                  'caseQuotaUsed', 'billingCycleStart', 'billingCycleEnd']));
    }

    // Organization members collection
    match /organization_members/{memberId} {
      allow read: if isAuthenticated() && 
        (request.auth.uid == resource.data.userId || 
         isOrgMember(resource.data.organizationId));
      
      // Only org admins can modify membership
      allow write: if isOrgAdmin(resource.data.organizationId);
    }

    // Cases collection
    match /cases/{caseId} {
      // Allow attempts to create a case - backend function handles actual validation
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      
      // Allow read access if user can access the case
      allow read: if isAuthenticated() && canAccessCase(resource.data);
      
      // Allow update and delete if user can modify the case
      allow update, delete: if isAuthenticated() && canModifyCase(resource.data);
    }

    // Documents collection (files related to cases)
    match /documents/{documentId} {
      allow read: if isAuthenticated() && 
        canAccessCase(get(/databases/$(database)/documents/cases/$(resource.data.caseId)).data);
        
      // Users can create documents for cases they have access to
      allow create: if isAuthenticated() && 
        request.resource.data.uploadedBy == request.auth.uid &&
        canAccessCase(get(/databases/$(database)/documents/cases/$(request.resource.data.caseId)).data);
    }

    // Plans collection (internal configuration)
    match /plans/{planId} {
      // Authenticated users/backend functions can read plan details
      allow read: if isAuthenticated();
      
      // No client-side writes allowed to plans
      allow write: if false;
    }
  }
} 