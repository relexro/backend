from xhtml2pdf import pisa
import io
import tempfile
import os
import functions_framework
from flask import jsonify
import logging
import sys

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    stream=sys.stdout  # Make sure logs go to stdout for Cloud Functions
)
logger = logging.getLogger('pdf-generator')

# Log startup information
logger.info("PDF Generator initializing...")
logger.info(f"xhtml2pdf version: {pisa.__version__}")
logger.info(f"Python version: {sys.version}")
logger.info(f"Working directory: {os.getcwd()}")
logger.info("PDF Generator initialization complete")

@functions_framework.http
def minimal_test(request):
    """Minimal function to test health checks and PDF generation.
    
    This serves as a troubleshooting endpoint to test the deployment.
    """
    logger.info(f"Received request: {request.method} {request.path}")
    try:
        # Health check response
        if request.method == 'GET' and (request.path == '/_ah/health' or request.path == '/'):
            logger.info("Responding to health check or root path request")
            return jsonify({"status": "healthy", "msg": "Health check passed"}), 200
            
        # Test PDF generation
        logger.info("Generating test PDF...")
        html = "<html><body><h1>Test PDF</h1><p>This is a test PDF generated by xhtml2pdf</p></body></html>"
        
        # Create a PDF
        pdf_file = io.BytesIO()
        logger.info("Creating PDF with xhtml2pdf...")
        pisa_status = pisa.CreatePDF(html, dest=pdf_file)
        
        # Check if it worked
        if not pisa_status.err:
            # Write to temp file to verify filesystem access
            logger.info("PDF generation successful, writing to temp file...")
            with tempfile.NamedTemporaryFile(delete=False, suffix='.pdf') as tmp:
                tmp.write(pdf_file.getvalue())
                tmp_path = tmp.name
                
            # Get file size and cleanup
            size = os.path.getsize(tmp_path)
            logger.info(f"Generated PDF size: {size} bytes")
            os.unlink(tmp_path)
            logger.info("Temp file removed, returning success response")
            
            # Return success
            return jsonify({
                "status": "success",
                "message": "PDF generation successful",
                "size_bytes": size,
                "xhtml2pdf_version": pisa.__version__
            }), 200
        else:
            logger.error(f"PDF generation failed: {pisa_status.err}")
            return jsonify({
                "status": "error",
                "message": f"PDF generation failed: {pisa_status.err}"
            }), 500
            
    except Exception as e:
        logger.error(f"Error in minimal_test: {str(e)}", exc_info=True)
        return jsonify({
            "status": "error",
            "message": f"Error: {str(e)}"
        }), 500 